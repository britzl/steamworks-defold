// GENERATED CODE - DO NOT MODIFY
// Copyright 2016 Bjorn Ritzl

#ifndef STEAMWORKS_DEFOLD_H
#define STEAMWORKS_DEFOLD_H

#include <dmsdk/sdk.h>

#if defined(DM_PLATFORM_OSX) || defined(DM_PLATFORM_WINDOWS) || defined(DM_PLATFORM_LINUX)

#include <stdlib.h>
#include <stdio.h>
#include "steam_api.h"
#include "steam_gameserver.h"

static void push_double(lua_State* L, double n);
static void push_float(lua_State* L, float n);
static void push_float_array(lua_State* L, float arr[], unsigned int size);
static void push_int(lua_State* L, int n);
static void push_int_array(lua_State* L, int arr[], unsigned int size);
static void push_unsigned_int(lua_State* L, unsigned int n);
static void push_unsigned_int_array(lua_State* L, unsigned int arr[], unsigned int size);
static void push_bool(lua_State* L, bool b);
static void push_char_array(lua_State* L, char ca[], unsigned int size);
static void push_const_char_ptr(lua_State* L, const char * s);
static void push_char_ptr(lua_State* L, char * s);
static void push_uint8(lua_State* L, unsigned char n);
static void push_uint8_array(lua_State* L, unsigned char arr[], unsigned int size);
static void push_int8(lua_State* L, signed char n);
static void push_int8_array(lua_State* L, signed char arr[], unsigned int size);
static void push_int16(lua_State* L, short n);
static void push_int16_array(lua_State* L, short arr[], unsigned int size);
static void push_uint16(lua_State* L, unsigned short n);
static void push_uint16_array(lua_State* L, unsigned short arr[], unsigned int size);
static void push_int32(lua_State* L, int n);
static void push_int32_array(lua_State* L, int arr[], unsigned int size);
static void push_uint32(lua_State* L, unsigned int n);
static void push_uint32_array(lua_State* L, unsigned int arr[], unsigned int size);
static void push_AppId_t(lua_State* L, unsigned int n);
static void push_AppId_t_array(lua_State* L, unsigned int arr[], unsigned int size);
static void push_DepotId_t(lua_State* L, unsigned int n);
static void push_DepotId_t_array(lua_State* L, unsigned int arr[], unsigned int size);
static void push_RTime32(lua_State* L, unsigned int n);
static void push_RTime32_array(lua_State* L, unsigned int arr[], unsigned int size);
static void push_AccountID_t(lua_State* L, unsigned int n);
static void push_AccountID_t_array(lua_State* L, unsigned int arr[], unsigned int size);
static void push_HAuthTicket(lua_State* L, unsigned int n);
static void push_HAuthTicket_array(lua_State* L, unsigned int arr[], unsigned int size);
static void push_HSteamPipe(lua_State* L, int n);
static void push_HSteamPipe_array(lua_State* L, int arr[], unsigned int size);
static void push_HSteamUser(lua_State* L, int n);
static void push_HSteamUser_array(lua_State* L, int arr[], unsigned int size);
static void push_FriendsGroupID_t(lua_State* L, short n);
static void push_FriendsGroupID_t_array(lua_State* L, short arr[], unsigned int size);
static void push_HServerQuery(lua_State* L, int n);
static void push_HServerQuery_array(lua_State* L, int arr[], unsigned int size);
static void push_SNetSocket_t(lua_State* L, unsigned int n);
static void push_SNetSocket_t_array(lua_State* L, unsigned int arr[], unsigned int size);
static void push_SNetListenSocket_t(lua_State* L, unsigned int n);
static void push_SNetListenSocket_t_array(lua_State* L, unsigned int arr[], unsigned int size);
static void push_ScreenshotHandle(lua_State* L, unsigned int n);
static void push_ScreenshotHandle_array(lua_State* L, unsigned int arr[], unsigned int size);
static void push_HTTPRequestHandle(lua_State* L, unsigned int n);
static void push_HTTPRequestHandle_array(lua_State* L, unsigned int arr[], unsigned int size);
static void push_HTTPCookieContainerHandle(lua_State* L, unsigned int n);
static void push_HTTPCookieContainerHandle_array(lua_State* L, unsigned int arr[], unsigned int size);
static void push_HHTMLBrowser(lua_State* L, unsigned int n);
static void push_HHTMLBrowser_array(lua_State* L, unsigned int arr[], unsigned int size);
static void push_SteamItemDef_t(lua_State* L, int n);
static void push_SteamItemDef_t_array(lua_State* L, int arr[], unsigned int size);
static void push_SteamInventoryResult_t(lua_State* L, int n);
static void push_SteamInventoryResult_t_array(lua_State* L, int arr[], unsigned int size);
static void push_RemotePlaySessionID_t(lua_State* L, unsigned int n);
static void push_RemotePlaySessionID_t_array(lua_State* L, unsigned int arr[], unsigned int size);
static void push_HSteamNetConnection(lua_State* L, unsigned int n);
static void push_HSteamNetConnection_array(lua_State* L, unsigned int arr[], unsigned int size);
static void push_HSteamListenSocket(lua_State* L, unsigned int n);
static void push_HSteamListenSocket_array(lua_State* L, unsigned int arr[], unsigned int size);
static void push_HSteamNetPollGroup(lua_State* L, unsigned int n);
static void push_HSteamNetPollGroup_array(lua_State* L, unsigned int arr[], unsigned int size);
static void push_SteamNetworkingPOPID(lua_State* L, unsigned int n);
static void push_SteamNetworkingPOPID_array(lua_State* L, unsigned int arr[], unsigned int size);

static void push_int64(lua_State* L, int64 n);
static void push_int64_array(lua_State* L, int64 arr[], unsigned int size);
static void push_lint64(lua_State* L, lint64 n);
static void push_lint64_array(lua_State* L, lint64 arr[], unsigned int size);
static void push_intp(lua_State* L, intp n);
static void push_intp_array(lua_State* L, intp arr[], unsigned int size);
static void push_SteamNetworkingMicroseconds(lua_State* L, SteamNetworkingMicroseconds n);
static void push_SteamNetworkingMicroseconds_array(lua_State* L, SteamNetworkingMicroseconds arr[], unsigned int size);
static void push_uint64(lua_State* L, uint64 n);
static void push_uint64_array(lua_State* L, uint64 arr[], unsigned int size);
static void push_ulint64(lua_State* L, ulint64 n);
static void push_ulint64_array(lua_State* L, ulint64 arr[], unsigned int size);
static void push_uintp(lua_State* L, uintp n);
static void push_uintp_array(lua_State* L, uintp arr[], unsigned int size);
static void push_SteamAPICall_t(lua_State* L, SteamAPICall_t n);
static void push_SteamAPICall_t_array(lua_State* L, SteamAPICall_t arr[], unsigned int size);
static void push_PartyBeaconID_t(lua_State* L, PartyBeaconID_t n);
static void push_PartyBeaconID_t_array(lua_State* L, PartyBeaconID_t arr[], unsigned int size);
static void push_UGCHandle_t(lua_State* L, UGCHandle_t n);
static void push_UGCHandle_t_array(lua_State* L, UGCHandle_t arr[], unsigned int size);
static void push_PublishedFileUpdateHandle_t(lua_State* L, PublishedFileUpdateHandle_t n);
static void push_PublishedFileUpdateHandle_t_array(lua_State* L, PublishedFileUpdateHandle_t arr[], unsigned int size);
static void push_PublishedFileId_t(lua_State* L, PublishedFileId_t n);
static void push_PublishedFileId_t_array(lua_State* L, PublishedFileId_t arr[], unsigned int size);
static void push_UGCFileWriteStreamHandle_t(lua_State* L, UGCFileWriteStreamHandle_t n);
static void push_UGCFileWriteStreamHandle_t_array(lua_State* L, UGCFileWriteStreamHandle_t arr[], unsigned int size);
static void push_SteamLeaderboard_t(lua_State* L, SteamLeaderboard_t n);
static void push_SteamLeaderboard_t_array(lua_State* L, SteamLeaderboard_t arr[], unsigned int size);
static void push_SteamLeaderboardEntries_t(lua_State* L, SteamLeaderboardEntries_t n);
static void push_SteamLeaderboardEntries_t_array(lua_State* L, SteamLeaderboardEntries_t arr[], unsigned int size);
static void push_InputHandle_t(lua_State* L, InputHandle_t n);
static void push_InputHandle_t_array(lua_State* L, InputHandle_t arr[], unsigned int size);
static void push_InputActionSetHandle_t(lua_State* L, InputActionSetHandle_t n);
static void push_InputActionSetHandle_t_array(lua_State* L, InputActionSetHandle_t arr[], unsigned int size);
static void push_InputDigitalActionHandle_t(lua_State* L, InputDigitalActionHandle_t n);
static void push_InputDigitalActionHandle_t_array(lua_State* L, InputDigitalActionHandle_t arr[], unsigned int size);
static void push_InputAnalogActionHandle_t(lua_State* L, InputAnalogActionHandle_t n);
static void push_InputAnalogActionHandle_t_array(lua_State* L, InputAnalogActionHandle_t arr[], unsigned int size);
static void push_ControllerHandle_t(lua_State* L, ControllerHandle_t n);
static void push_ControllerHandle_t_array(lua_State* L, ControllerHandle_t arr[], unsigned int size);
static void push_ControllerActionSetHandle_t(lua_State* L, ControllerActionSetHandle_t n);
static void push_ControllerActionSetHandle_t_array(lua_State* L, ControllerActionSetHandle_t arr[], unsigned int size);
static void push_ControllerDigitalActionHandle_t(lua_State* L, ControllerDigitalActionHandle_t n);
static void push_ControllerDigitalActionHandle_t_array(lua_State* L, ControllerDigitalActionHandle_t arr[], unsigned int size);
static void push_ControllerAnalogActionHandle_t(lua_State* L, ControllerAnalogActionHandle_t n);
static void push_ControllerAnalogActionHandle_t_array(lua_State* L, ControllerAnalogActionHandle_t arr[], unsigned int size);
static void push_UGCQueryHandle_t(lua_State* L, UGCQueryHandle_t n);
static void push_UGCQueryHandle_t_array(lua_State* L, UGCQueryHandle_t arr[], unsigned int size);
static void push_UGCUpdateHandle_t(lua_State* L, UGCUpdateHandle_t n);
static void push_UGCUpdateHandle_t_array(lua_State* L, UGCUpdateHandle_t arr[], unsigned int size);
static void push_SteamItemInstanceID_t(lua_State* L, SteamItemInstanceID_t n);
static void push_SteamItemInstanceID_t_array(lua_State* L, SteamItemInstanceID_t arr[], unsigned int size);
static void push_SteamInventoryUpdateHandle_t(lua_State* L, SteamInventoryUpdateHandle_t n);
static void push_SteamInventoryUpdateHandle_t_array(lua_State* L, SteamInventoryUpdateHandle_t arr[], unsigned int size);

static void push_ESteamIPType(lua_State* L, ESteamIPType n);
static void push_EUniverse(lua_State* L, EUniverse n);
static void push_EResult(lua_State* L, EResult n);
static void push_EVoiceResult(lua_State* L, EVoiceResult n);
static void push_EDenyReason(lua_State* L, EDenyReason n);
static void push_EBeginAuthSessionResult(lua_State* L, EBeginAuthSessionResult n);
static void push_EAuthSessionResponse(lua_State* L, EAuthSessionResponse n);
static void push_EUserHasLicenseForAppResult(lua_State* L, EUserHasLicenseForAppResult n);
static void push_EAccountType(lua_State* L, EAccountType n);
static void push_EChatEntryType(lua_State* L, EChatEntryType n);
static void push_EChatRoomEnterResponse(lua_State* L, EChatRoomEnterResponse n);
static void push_EChatSteamIDInstanceFlags(lua_State* L, EChatSteamIDInstanceFlags n);
static void push_ENotificationPosition(lua_State* L, ENotificationPosition n);
static void push_EBroadcastUploadResult(lua_State* L, EBroadcastUploadResult n);
static void push_EMarketNotAllowedReasonFlags(lua_State* L, EMarketNotAllowedReasonFlags n);
static void push_EDurationControlProgress(lua_State* L, EDurationControlProgress n);
static void push_EDurationControlNotification(lua_State* L, EDurationControlNotification n);
static void push_EDurationControlOnlineState(lua_State* L, EDurationControlOnlineState n);
static void push_EGameSearchErrorCode_t(lua_State* L, EGameSearchErrorCode_t n);
static void push_EPlayerResult_t(lua_State* L, EPlayerResult_t n);
static void push_ESteamIPv6ConnectivityProtocol(lua_State* L, ESteamIPv6ConnectivityProtocol n);
static void push_ESteamIPv6ConnectivityState(lua_State* L, ESteamIPv6ConnectivityState n);
static void push_EFriendRelationship(lua_State* L, EFriendRelationship n);
static void push_EPersonaState(lua_State* L, EPersonaState n);
static void push_EFriendFlags(lua_State* L, EFriendFlags n);
static void push_EUserRestriction(lua_State* L, EUserRestriction n);
static void push_EOverlayToStoreFlag(lua_State* L, EOverlayToStoreFlag n);
static void push_EActivateGameOverlayToWebPageMode(lua_State* L, EActivateGameOverlayToWebPageMode n);
static void push_ECommunityProfileItemType(lua_State* L, ECommunityProfileItemType n);
static void push_ECommunityProfileItemProperty(lua_State* L, ECommunityProfileItemProperty n);
static void push_EPersonaChange(lua_State* L, EPersonaChange n);
static void push_ESteamAPICallFailure(lua_State* L, ESteamAPICallFailure n);
static void push_EGamepadTextInputMode(lua_State* L, EGamepadTextInputMode n);
static void push_EGamepadTextInputLineMode(lua_State* L, EGamepadTextInputLineMode n);
static void push_EFloatingGamepadTextInputMode(lua_State* L, EFloatingGamepadTextInputMode n);
static void push_ETextFilteringContext(lua_State* L, ETextFilteringContext n);
static void push_ECheckFileSignature(lua_State* L, ECheckFileSignature n);
static void push_EMatchMakingServerResponse(lua_State* L, EMatchMakingServerResponse n);
static void push_ELobbyType(lua_State* L, ELobbyType n);
static void push_ELobbyComparison(lua_State* L, ELobbyComparison n);
static void push_ELobbyDistanceFilter(lua_State* L, ELobbyDistanceFilter n);
static void push_EChatMemberStateChange(lua_State* L, EChatMemberStateChange n);
static void push_ESteamPartyBeaconLocationType(lua_State* L, ESteamPartyBeaconLocationType n);
static void push_ESteamPartyBeaconLocationData(lua_State* L, ESteamPartyBeaconLocationData n);
static void push_ERemoteStoragePlatform(lua_State* L, ERemoteStoragePlatform n);
static void push_ERemoteStoragePublishedFileVisibility(lua_State* L, ERemoteStoragePublishedFileVisibility n);
static void push_EWorkshopFileType(lua_State* L, EWorkshopFileType n);
static void push_EWorkshopVote(lua_State* L, EWorkshopVote n);
static void push_EWorkshopFileAction(lua_State* L, EWorkshopFileAction n);
static void push_EWorkshopEnumerationType(lua_State* L, EWorkshopEnumerationType n);
static void push_EWorkshopVideoProvider(lua_State* L, EWorkshopVideoProvider n);
static void push_EUGCReadAction(lua_State* L, EUGCReadAction n);
static void push_ERemoteStorageLocalFileChange(lua_State* L, ERemoteStorageLocalFileChange n);
static void push_ERemoteStorageFilePathType(lua_State* L, ERemoteStorageFilePathType n);
static void push_ELeaderboardDataRequest(lua_State* L, ELeaderboardDataRequest n);
static void push_ELeaderboardSortMethod(lua_State* L, ELeaderboardSortMethod n);
static void push_ELeaderboardDisplayType(lua_State* L, ELeaderboardDisplayType n);
static void push_ELeaderboardUploadScoreMethod(lua_State* L, ELeaderboardUploadScoreMethod n);
static void push_ERegisterActivationCodeResult(lua_State* L, ERegisterActivationCodeResult n);
static void push_EP2PSessionError(lua_State* L, EP2PSessionError n);
static void push_EP2PSend(lua_State* L, EP2PSend n);
static void push_ESNetSocketState(lua_State* L, ESNetSocketState n);
static void push_ESNetSocketConnectionType(lua_State* L, ESNetSocketConnectionType n);
static void push_EVRScreenshotType(lua_State* L, EVRScreenshotType n);
static void push_AudioPlayback_Status(lua_State* L, AudioPlayback_Status n);
static void push_EHTTPMethod(lua_State* L, EHTTPMethod n);
static void push_EHTTPStatusCode(lua_State* L, EHTTPStatusCode n);
static void push_EInputSourceMode(lua_State* L, EInputSourceMode n);
static void push_EInputActionOrigin(lua_State* L, EInputActionOrigin n);
static void push_EXboxOrigin(lua_State* L, EXboxOrigin n);
static void push_ESteamControllerPad(lua_State* L, ESteamControllerPad n);
static void push_EControllerHapticLocation(lua_State* L, EControllerHapticLocation n);
static void push_EControllerHapticType(lua_State* L, EControllerHapticType n);
static void push_ESteamInputType(lua_State* L, ESteamInputType n);
static void push_ESteamInputConfigurationEnableType(lua_State* L, ESteamInputConfigurationEnableType n);
static void push_ESteamInputLEDFlag(lua_State* L, ESteamInputLEDFlag n);
static void push_ESteamInputGlyphSize(lua_State* L, ESteamInputGlyphSize n);
static void push_ESteamInputGlyphStyle(lua_State* L, ESteamInputGlyphStyle n);
static void push_ESteamInputActionEventType(lua_State* L, ESteamInputActionEventType n);
static void push_EControllerActionOrigin(lua_State* L, EControllerActionOrigin n);
static void push_ESteamControllerLEDFlag(lua_State* L, ESteamControllerLEDFlag n);
static void push_EUGCMatchingUGCType(lua_State* L, EUGCMatchingUGCType n);
static void push_EUserUGCList(lua_State* L, EUserUGCList n);
static void push_EUserUGCListSortOrder(lua_State* L, EUserUGCListSortOrder n);
static void push_EUGCQuery(lua_State* L, EUGCQuery n);
static void push_EItemUpdateStatus(lua_State* L, EItemUpdateStatus n);
static void push_EItemState(lua_State* L, EItemState n);
static void push_EItemStatistic(lua_State* L, EItemStatistic n);
static void push_EItemPreviewType(lua_State* L, EItemPreviewType n);
static void push_ESteamItemFlags(lua_State* L, ESteamItemFlags n);
static void push_EParentalFeature(lua_State* L, EParentalFeature n);
static void push_ESteamDeviceFormFactor(lua_State* L, ESteamDeviceFormFactor n);
static void push_ESteamNetworkingAvailability(lua_State* L, ESteamNetworkingAvailability n);
static void push_ESteamNetworkingIdentityType(lua_State* L, ESteamNetworkingIdentityType n);
static void push_ESteamNetworkingFakeIPType(lua_State* L, ESteamNetworkingFakeIPType n);
static void push_ESteamNetworkingConnectionState(lua_State* L, ESteamNetworkingConnectionState n);
static void push_ESteamNetConnectionEnd(lua_State* L, ESteamNetConnectionEnd n);
static void push_ESteamNetworkingConfigScope(lua_State* L, ESteamNetworkingConfigScope n);
static void push_ESteamNetworkingConfigDataType(lua_State* L, ESteamNetworkingConfigDataType n);
static void push_ESteamNetworkingConfigValue(lua_State* L, ESteamNetworkingConfigValue n);
static void push_ESteamNetworkingGetConfigValueResult(lua_State* L, ESteamNetworkingGetConfigValueResult n);
static void push_ESteamNetworkingSocketsDebugOutputType(lua_State* L, ESteamNetworkingSocketsDebugOutputType n);
static void push_EServerMode(lua_State* L, EServerMode n);
static void push_EFailureType(lua_State* L, IPCFailure_t::EFailureType n);
static void push_PlayerAcceptState_t(lua_State* L, RequestPlayersForGameResultCallback_t::PlayerAcceptState_t n);

static void push_CSteamID(lua_State* L, CSteamID steamId);
static void push_class_CSteamID(lua_State* L, CSteamID steamId);
static void push_CSteamID_array(lua_State* L, CSteamID steamId[], unsigned int size);

static void push_CGameID(lua_State* L, CGameID gameId);

static void push_servernetadr_t(lua_State* L, servernetadr_t s);
static void push_gameserveritem_t(lua_State* L, gameserveritem_t s);
static void push_SteamParamStringArray_t(lua_State* L, SteamParamStringArray_t s);
static void push_SteamIPAddress_t(lua_State* L, SteamIPAddress_t s);
static void push_SteamIPAddress_t_array(lua_State* L, SteamIPAddress_t arr[], unsigned int size);
static void push_FriendGameInfo_t(lua_State* L, FriendGameInfo_t s);
static void push_FriendGameInfo_t_array(lua_State* L, FriendGameInfo_t arr[], unsigned int size);
static void push_MatchMakingKeyValuePair_t(lua_State* L, MatchMakingKeyValuePair_t s);
static void push_MatchMakingKeyValuePair_t_array(lua_State* L, MatchMakingKeyValuePair_t arr[], unsigned int size);
static void push_SteamPartyBeaconLocation_t(lua_State* L, SteamPartyBeaconLocation_t s);
static void push_SteamPartyBeaconLocation_t_array(lua_State* L, SteamPartyBeaconLocation_t arr[], unsigned int size);
static void push_LeaderboardEntry_t(lua_State* L, LeaderboardEntry_t s);
static void push_LeaderboardEntry_t_array(lua_State* L, LeaderboardEntry_t arr[], unsigned int size);
static void push_P2PSessionState_t(lua_State* L, P2PSessionState_t s);
static void push_P2PSessionState_t_array(lua_State* L, P2PSessionState_t arr[], unsigned int size);
static void push_InputAnalogActionData_t(lua_State* L, InputAnalogActionData_t s);
static void push_InputAnalogActionData_t_array(lua_State* L, InputAnalogActionData_t arr[], unsigned int size);
static void push_InputDigitalActionData_t(lua_State* L, InputDigitalActionData_t s);
static void push_InputDigitalActionData_t_array(lua_State* L, InputDigitalActionData_t arr[], unsigned int size);
static void push_InputMotionData_t(lua_State* L, InputMotionData_t s);
static void push_InputMotionData_t_array(lua_State* L, InputMotionData_t arr[], unsigned int size);
static void push_SteamUGCDetails_t(lua_State* L, SteamUGCDetails_t s);
static void push_SteamUGCDetails_t_array(lua_State* L, SteamUGCDetails_t arr[], unsigned int size);
static void push_SteamItemDetails_t(lua_State* L, SteamItemDetails_t s);
static void push_SteamItemDetails_t_array(lua_State* L, SteamItemDetails_t arr[], unsigned int size);
static void push_SteamNetworkingIPAddr(lua_State* L, SteamNetworkingIPAddr s);
static void push_SteamNetworkingIPAddr_array(lua_State* L, SteamNetworkingIPAddr arr[], unsigned int size);
static void push_SteamNetworkingIdentity(lua_State* L, SteamNetworkingIdentity s);
static void push_SteamNetworkingIdentity_array(lua_State* L, SteamNetworkingIdentity arr[], unsigned int size);
static void push_SteamNetConnectionInfo_t(lua_State* L, SteamNetConnectionInfo_t s);
static void push_SteamNetConnectionInfo_t_array(lua_State* L, SteamNetConnectionInfo_t arr[], unsigned int size);
static void push_SteamNetConnectionRealTimeStatus_t(lua_State* L, SteamNetConnectionRealTimeStatus_t s);
static void push_SteamNetConnectionRealTimeStatus_t_array(lua_State* L, SteamNetConnectionRealTimeStatus_t arr[], unsigned int size);
static void push_SteamNetConnectionRealTimeLaneStatus_t(lua_State* L, SteamNetConnectionRealTimeLaneStatus_t s);
static void push_SteamNetConnectionRealTimeLaneStatus_t_array(lua_State* L, SteamNetConnectionRealTimeLaneStatus_t arr[], unsigned int size);
static void push_SteamNetworkPingLocation_t(lua_State* L, SteamNetworkPingLocation_t s);
static void push_SteamNetworkPingLocation_t_array(lua_State* L, SteamNetworkPingLocation_t arr[], unsigned int size);
static void push_SteamServersConnected_t(lua_State* L, SteamServersConnected_t s);
static void push_SteamServersConnected_t_array(lua_State* L, SteamServersConnected_t arr[], unsigned int size);
static void push_SteamServerConnectFailure_t(lua_State* L, SteamServerConnectFailure_t s);
static void push_SteamServerConnectFailure_t_array(lua_State* L, SteamServerConnectFailure_t arr[], unsigned int size);
static void push_SteamServersDisconnected_t(lua_State* L, SteamServersDisconnected_t s);
static void push_SteamServersDisconnected_t_array(lua_State* L, SteamServersDisconnected_t arr[], unsigned int size);
static void push_ClientGameServerDeny_t(lua_State* L, ClientGameServerDeny_t s);
static void push_ClientGameServerDeny_t_array(lua_State* L, ClientGameServerDeny_t arr[], unsigned int size);
static void push_IPCFailure_t(lua_State* L, IPCFailure_t s);
static void push_IPCFailure_t_array(lua_State* L, IPCFailure_t arr[], unsigned int size);
static void push_LicensesUpdated_t(lua_State* L, LicensesUpdated_t s);
static void push_LicensesUpdated_t_array(lua_State* L, LicensesUpdated_t arr[], unsigned int size);
static void push_ValidateAuthTicketResponse_t(lua_State* L, ValidateAuthTicketResponse_t s);
static void push_ValidateAuthTicketResponse_t_array(lua_State* L, ValidateAuthTicketResponse_t arr[], unsigned int size);
static void push_MicroTxnAuthorizationResponse_t(lua_State* L, MicroTxnAuthorizationResponse_t s);
static void push_MicroTxnAuthorizationResponse_t_array(lua_State* L, MicroTxnAuthorizationResponse_t arr[], unsigned int size);
static void push_EncryptedAppTicketResponse_t(lua_State* L, EncryptedAppTicketResponse_t s);
static void push_EncryptedAppTicketResponse_t_array(lua_State* L, EncryptedAppTicketResponse_t arr[], unsigned int size);
static void push_GetAuthSessionTicketResponse_t(lua_State* L, GetAuthSessionTicketResponse_t s);
static void push_GetAuthSessionTicketResponse_t_array(lua_State* L, GetAuthSessionTicketResponse_t arr[], unsigned int size);
static void push_GameWebCallback_t(lua_State* L, GameWebCallback_t s);
static void push_GameWebCallback_t_array(lua_State* L, GameWebCallback_t arr[], unsigned int size);
static void push_StoreAuthURLResponse_t(lua_State* L, StoreAuthURLResponse_t s);
static void push_StoreAuthURLResponse_t_array(lua_State* L, StoreAuthURLResponse_t arr[], unsigned int size);
static void push_MarketEligibilityResponse_t(lua_State* L, MarketEligibilityResponse_t s);
static void push_MarketEligibilityResponse_t_array(lua_State* L, MarketEligibilityResponse_t arr[], unsigned int size);
static void push_DurationControl_t(lua_State* L, DurationControl_t s);
static void push_DurationControl_t_array(lua_State* L, DurationControl_t arr[], unsigned int size);
static void push_PersonaStateChange_t(lua_State* L, PersonaStateChange_t s);
static void push_PersonaStateChange_t_array(lua_State* L, PersonaStateChange_t arr[], unsigned int size);
static void push_GameOverlayActivated_t(lua_State* L, GameOverlayActivated_t s);
static void push_GameOverlayActivated_t_array(lua_State* L, GameOverlayActivated_t arr[], unsigned int size);
static void push_GameServerChangeRequested_t(lua_State* L, GameServerChangeRequested_t s);
static void push_GameServerChangeRequested_t_array(lua_State* L, GameServerChangeRequested_t arr[], unsigned int size);
static void push_GameLobbyJoinRequested_t(lua_State* L, GameLobbyJoinRequested_t s);
static void push_GameLobbyJoinRequested_t_array(lua_State* L, GameLobbyJoinRequested_t arr[], unsigned int size);
static void push_AvatarImageLoaded_t(lua_State* L, AvatarImageLoaded_t s);
static void push_AvatarImageLoaded_t_array(lua_State* L, AvatarImageLoaded_t arr[], unsigned int size);
static void push_ClanOfficerListResponse_t(lua_State* L, ClanOfficerListResponse_t s);
static void push_ClanOfficerListResponse_t_array(lua_State* L, ClanOfficerListResponse_t arr[], unsigned int size);
static void push_FriendRichPresenceUpdate_t(lua_State* L, FriendRichPresenceUpdate_t s);
static void push_FriendRichPresenceUpdate_t_array(lua_State* L, FriendRichPresenceUpdate_t arr[], unsigned int size);
static void push_GameRichPresenceJoinRequested_t(lua_State* L, GameRichPresenceJoinRequested_t s);
static void push_GameRichPresenceJoinRequested_t_array(lua_State* L, GameRichPresenceJoinRequested_t arr[], unsigned int size);
static void push_GameConnectedClanChatMsg_t(lua_State* L, GameConnectedClanChatMsg_t s);
static void push_GameConnectedClanChatMsg_t_array(lua_State* L, GameConnectedClanChatMsg_t arr[], unsigned int size);
static void push_GameConnectedChatJoin_t(lua_State* L, GameConnectedChatJoin_t s);
static void push_GameConnectedChatJoin_t_array(lua_State* L, GameConnectedChatJoin_t arr[], unsigned int size);
static void push_GameConnectedChatLeave_t(lua_State* L, GameConnectedChatLeave_t s);
static void push_GameConnectedChatLeave_t_array(lua_State* L, GameConnectedChatLeave_t arr[], unsigned int size);
static void push_DownloadClanActivityCountsResult_t(lua_State* L, DownloadClanActivityCountsResult_t s);
static void push_DownloadClanActivityCountsResult_t_array(lua_State* L, DownloadClanActivityCountsResult_t arr[], unsigned int size);
static void push_JoinClanChatRoomCompletionResult_t(lua_State* L, JoinClanChatRoomCompletionResult_t s);
static void push_JoinClanChatRoomCompletionResult_t_array(lua_State* L, JoinClanChatRoomCompletionResult_t arr[], unsigned int size);
static void push_GameConnectedFriendChatMsg_t(lua_State* L, GameConnectedFriendChatMsg_t s);
static void push_GameConnectedFriendChatMsg_t_array(lua_State* L, GameConnectedFriendChatMsg_t arr[], unsigned int size);
static void push_FriendsGetFollowerCount_t(lua_State* L, FriendsGetFollowerCount_t s);
static void push_FriendsGetFollowerCount_t_array(lua_State* L, FriendsGetFollowerCount_t arr[], unsigned int size);
static void push_FriendsIsFollowing_t(lua_State* L, FriendsIsFollowing_t s);
static void push_FriendsIsFollowing_t_array(lua_State* L, FriendsIsFollowing_t arr[], unsigned int size);
static void push_FriendsEnumerateFollowingList_t(lua_State* L, FriendsEnumerateFollowingList_t s);
static void push_FriendsEnumerateFollowingList_t_array(lua_State* L, FriendsEnumerateFollowingList_t arr[], unsigned int size);
static void push_SetPersonaNameResponse_t(lua_State* L, SetPersonaNameResponse_t s);
static void push_SetPersonaNameResponse_t_array(lua_State* L, SetPersonaNameResponse_t arr[], unsigned int size);
static void push_UnreadChatMessagesChanged_t(lua_State* L, UnreadChatMessagesChanged_t s);
static void push_UnreadChatMessagesChanged_t_array(lua_State* L, UnreadChatMessagesChanged_t arr[], unsigned int size);
static void push_OverlayBrowserProtocolNavigation_t(lua_State* L, OverlayBrowserProtocolNavigation_t s);
static void push_OverlayBrowserProtocolNavigation_t_array(lua_State* L, OverlayBrowserProtocolNavigation_t arr[], unsigned int size);
static void push_EquippedProfileItemsChanged_t(lua_State* L, EquippedProfileItemsChanged_t s);
static void push_EquippedProfileItemsChanged_t_array(lua_State* L, EquippedProfileItemsChanged_t arr[], unsigned int size);
static void push_EquippedProfileItems_t(lua_State* L, EquippedProfileItems_t s);
static void push_EquippedProfileItems_t_array(lua_State* L, EquippedProfileItems_t arr[], unsigned int size);
static void push_IPCountry_t(lua_State* L, IPCountry_t s);
static void push_IPCountry_t_array(lua_State* L, IPCountry_t arr[], unsigned int size);
static void push_LowBatteryPower_t(lua_State* L, LowBatteryPower_t s);
static void push_LowBatteryPower_t_array(lua_State* L, LowBatteryPower_t arr[], unsigned int size);
static void push_SteamAPICallCompleted_t(lua_State* L, SteamAPICallCompleted_t s);
static void push_SteamAPICallCompleted_t_array(lua_State* L, SteamAPICallCompleted_t arr[], unsigned int size);
static void push_SteamShutdown_t(lua_State* L, SteamShutdown_t s);
static void push_SteamShutdown_t_array(lua_State* L, SteamShutdown_t arr[], unsigned int size);
static void push_CheckFileSignature_t(lua_State* L, CheckFileSignature_t s);
static void push_CheckFileSignature_t_array(lua_State* L, CheckFileSignature_t arr[], unsigned int size);
static void push_GamepadTextInputDismissed_t(lua_State* L, GamepadTextInputDismissed_t s);
static void push_GamepadTextInputDismissed_t_array(lua_State* L, GamepadTextInputDismissed_t arr[], unsigned int size);
static void push_AppResumingFromSuspend_t(lua_State* L, AppResumingFromSuspend_t s);
static void push_AppResumingFromSuspend_t_array(lua_State* L, AppResumingFromSuspend_t arr[], unsigned int size);
static void push_FloatingGamepadTextInputDismissed_t(lua_State* L, FloatingGamepadTextInputDismissed_t s);
static void push_FloatingGamepadTextInputDismissed_t_array(lua_State* L, FloatingGamepadTextInputDismissed_t arr[], unsigned int size);
static void push_FavoritesListChanged_t(lua_State* L, FavoritesListChanged_t s);
static void push_FavoritesListChanged_t_array(lua_State* L, FavoritesListChanged_t arr[], unsigned int size);
static void push_LobbyInvite_t(lua_State* L, LobbyInvite_t s);
static void push_LobbyInvite_t_array(lua_State* L, LobbyInvite_t arr[], unsigned int size);
static void push_LobbyEnter_t(lua_State* L, LobbyEnter_t s);
static void push_LobbyEnter_t_array(lua_State* L, LobbyEnter_t arr[], unsigned int size);
static void push_LobbyDataUpdate_t(lua_State* L, LobbyDataUpdate_t s);
static void push_LobbyDataUpdate_t_array(lua_State* L, LobbyDataUpdate_t arr[], unsigned int size);
static void push_LobbyChatUpdate_t(lua_State* L, LobbyChatUpdate_t s);
static void push_LobbyChatUpdate_t_array(lua_State* L, LobbyChatUpdate_t arr[], unsigned int size);
static void push_LobbyChatMsg_t(lua_State* L, LobbyChatMsg_t s);
static void push_LobbyChatMsg_t_array(lua_State* L, LobbyChatMsg_t arr[], unsigned int size);
static void push_LobbyGameCreated_t(lua_State* L, LobbyGameCreated_t s);
static void push_LobbyGameCreated_t_array(lua_State* L, LobbyGameCreated_t arr[], unsigned int size);
static void push_LobbyMatchList_t(lua_State* L, LobbyMatchList_t s);
static void push_LobbyMatchList_t_array(lua_State* L, LobbyMatchList_t arr[], unsigned int size);
static void push_LobbyKicked_t(lua_State* L, LobbyKicked_t s);
static void push_LobbyKicked_t_array(lua_State* L, LobbyKicked_t arr[], unsigned int size);
static void push_LobbyCreated_t(lua_State* L, LobbyCreated_t s);
static void push_LobbyCreated_t_array(lua_State* L, LobbyCreated_t arr[], unsigned int size);
static void push_PSNGameBootInviteResult_t(lua_State* L, PSNGameBootInviteResult_t s);
static void push_PSNGameBootInviteResult_t_array(lua_State* L, PSNGameBootInviteResult_t arr[], unsigned int size);
static void push_FavoritesListAccountsUpdated_t(lua_State* L, FavoritesListAccountsUpdated_t s);
static void push_FavoritesListAccountsUpdated_t_array(lua_State* L, FavoritesListAccountsUpdated_t arr[], unsigned int size);
static void push_SearchForGameProgressCallback_t(lua_State* L, SearchForGameProgressCallback_t s);
static void push_SearchForGameProgressCallback_t_array(lua_State* L, SearchForGameProgressCallback_t arr[], unsigned int size);
static void push_SearchForGameResultCallback_t(lua_State* L, SearchForGameResultCallback_t s);
static void push_SearchForGameResultCallback_t_array(lua_State* L, SearchForGameResultCallback_t arr[], unsigned int size);
static void push_RequestPlayersForGameProgressCallback_t(lua_State* L, RequestPlayersForGameProgressCallback_t s);
static void push_RequestPlayersForGameProgressCallback_t_array(lua_State* L, RequestPlayersForGameProgressCallback_t arr[], unsigned int size);
static void push_RequestPlayersForGameResultCallback_t(lua_State* L, RequestPlayersForGameResultCallback_t s);
static void push_RequestPlayersForGameResultCallback_t_array(lua_State* L, RequestPlayersForGameResultCallback_t arr[], unsigned int size);
static void push_RequestPlayersForGameFinalResultCallback_t(lua_State* L, RequestPlayersForGameFinalResultCallback_t s);
static void push_RequestPlayersForGameFinalResultCallback_t_array(lua_State* L, RequestPlayersForGameFinalResultCallback_t arr[], unsigned int size);
static void push_SubmitPlayerResultResultCallback_t(lua_State* L, SubmitPlayerResultResultCallback_t s);
static void push_SubmitPlayerResultResultCallback_t_array(lua_State* L, SubmitPlayerResultResultCallback_t arr[], unsigned int size);
static void push_EndGameResultCallback_t(lua_State* L, EndGameResultCallback_t s);
static void push_EndGameResultCallback_t_array(lua_State* L, EndGameResultCallback_t arr[], unsigned int size);
static void push_JoinPartyCallback_t(lua_State* L, JoinPartyCallback_t s);
static void push_JoinPartyCallback_t_array(lua_State* L, JoinPartyCallback_t arr[], unsigned int size);
static void push_CreateBeaconCallback_t(lua_State* L, CreateBeaconCallback_t s);
static void push_CreateBeaconCallback_t_array(lua_State* L, CreateBeaconCallback_t arr[], unsigned int size);
static void push_ReservationNotificationCallback_t(lua_State* L, ReservationNotificationCallback_t s);
static void push_ReservationNotificationCallback_t_array(lua_State* L, ReservationNotificationCallback_t arr[], unsigned int size);
static void push_ChangeNumOpenSlotsCallback_t(lua_State* L, ChangeNumOpenSlotsCallback_t s);
static void push_ChangeNumOpenSlotsCallback_t_array(lua_State* L, ChangeNumOpenSlotsCallback_t arr[], unsigned int size);
static void push_AvailableBeaconLocationsUpdated_t(lua_State* L, AvailableBeaconLocationsUpdated_t s);
static void push_AvailableBeaconLocationsUpdated_t_array(lua_State* L, AvailableBeaconLocationsUpdated_t arr[], unsigned int size);
static void push_ActiveBeaconsUpdated_t(lua_State* L, ActiveBeaconsUpdated_t s);
static void push_ActiveBeaconsUpdated_t_array(lua_State* L, ActiveBeaconsUpdated_t arr[], unsigned int size);
static void push_RemoteStorageFileShareResult_t(lua_State* L, RemoteStorageFileShareResult_t s);
static void push_RemoteStorageFileShareResult_t_array(lua_State* L, RemoteStorageFileShareResult_t arr[], unsigned int size);
static void push_RemoteStoragePublishFileResult_t(lua_State* L, RemoteStoragePublishFileResult_t s);
static void push_RemoteStoragePublishFileResult_t_array(lua_State* L, RemoteStoragePublishFileResult_t arr[], unsigned int size);
static void push_RemoteStorageDeletePublishedFileResult_t(lua_State* L, RemoteStorageDeletePublishedFileResult_t s);
static void push_RemoteStorageDeletePublishedFileResult_t_array(lua_State* L, RemoteStorageDeletePublishedFileResult_t arr[], unsigned int size);
static void push_RemoteStorageEnumerateUserPublishedFilesResult_t(lua_State* L, RemoteStorageEnumerateUserPublishedFilesResult_t s);
static void push_RemoteStorageEnumerateUserPublishedFilesResult_t_array(lua_State* L, RemoteStorageEnumerateUserPublishedFilesResult_t arr[], unsigned int size);
static void push_RemoteStorageSubscribePublishedFileResult_t(lua_State* L, RemoteStorageSubscribePublishedFileResult_t s);
static void push_RemoteStorageSubscribePublishedFileResult_t_array(lua_State* L, RemoteStorageSubscribePublishedFileResult_t arr[], unsigned int size);
static void push_RemoteStorageEnumerateUserSubscribedFilesResult_t(lua_State* L, RemoteStorageEnumerateUserSubscribedFilesResult_t s);
static void push_RemoteStorageEnumerateUserSubscribedFilesResult_t_array(lua_State* L, RemoteStorageEnumerateUserSubscribedFilesResult_t arr[], unsigned int size);
static void push_RemoteStorageUnsubscribePublishedFileResult_t(lua_State* L, RemoteStorageUnsubscribePublishedFileResult_t s);
static void push_RemoteStorageUnsubscribePublishedFileResult_t_array(lua_State* L, RemoteStorageUnsubscribePublishedFileResult_t arr[], unsigned int size);
static void push_RemoteStorageUpdatePublishedFileResult_t(lua_State* L, RemoteStorageUpdatePublishedFileResult_t s);
static void push_RemoteStorageUpdatePublishedFileResult_t_array(lua_State* L, RemoteStorageUpdatePublishedFileResult_t arr[], unsigned int size);
static void push_RemoteStorageDownloadUGCResult_t(lua_State* L, RemoteStorageDownloadUGCResult_t s);
static void push_RemoteStorageDownloadUGCResult_t_array(lua_State* L, RemoteStorageDownloadUGCResult_t arr[], unsigned int size);
static void push_RemoteStorageGetPublishedFileDetailsResult_t(lua_State* L, RemoteStorageGetPublishedFileDetailsResult_t s);
static void push_RemoteStorageGetPublishedFileDetailsResult_t_array(lua_State* L, RemoteStorageGetPublishedFileDetailsResult_t arr[], unsigned int size);
static void push_RemoteStorageEnumerateWorkshopFilesResult_t(lua_State* L, RemoteStorageEnumerateWorkshopFilesResult_t s);
static void push_RemoteStorageEnumerateWorkshopFilesResult_t_array(lua_State* L, RemoteStorageEnumerateWorkshopFilesResult_t arr[], unsigned int size);
static void push_RemoteStorageGetPublishedItemVoteDetailsResult_t(lua_State* L, RemoteStorageGetPublishedItemVoteDetailsResult_t s);
static void push_RemoteStorageGetPublishedItemVoteDetailsResult_t_array(lua_State* L, RemoteStorageGetPublishedItemVoteDetailsResult_t arr[], unsigned int size);
static void push_RemoteStoragePublishedFileSubscribed_t(lua_State* L, RemoteStoragePublishedFileSubscribed_t s);
static void push_RemoteStoragePublishedFileSubscribed_t_array(lua_State* L, RemoteStoragePublishedFileSubscribed_t arr[], unsigned int size);
static void push_RemoteStoragePublishedFileUnsubscribed_t(lua_State* L, RemoteStoragePublishedFileUnsubscribed_t s);
static void push_RemoteStoragePublishedFileUnsubscribed_t_array(lua_State* L, RemoteStoragePublishedFileUnsubscribed_t arr[], unsigned int size);
static void push_RemoteStoragePublishedFileDeleted_t(lua_State* L, RemoteStoragePublishedFileDeleted_t s);
static void push_RemoteStoragePublishedFileDeleted_t_array(lua_State* L, RemoteStoragePublishedFileDeleted_t arr[], unsigned int size);
static void push_RemoteStorageUpdateUserPublishedItemVoteResult_t(lua_State* L, RemoteStorageUpdateUserPublishedItemVoteResult_t s);
static void push_RemoteStorageUpdateUserPublishedItemVoteResult_t_array(lua_State* L, RemoteStorageUpdateUserPublishedItemVoteResult_t arr[], unsigned int size);
static void push_RemoteStorageUserVoteDetails_t(lua_State* L, RemoteStorageUserVoteDetails_t s);
static void push_RemoteStorageUserVoteDetails_t_array(lua_State* L, RemoteStorageUserVoteDetails_t arr[], unsigned int size);
static void push_RemoteStorageEnumerateUserSharedWorkshopFilesResult_t(lua_State* L, RemoteStorageEnumerateUserSharedWorkshopFilesResult_t s);
static void push_RemoteStorageEnumerateUserSharedWorkshopFilesResult_t_array(lua_State* L, RemoteStorageEnumerateUserSharedWorkshopFilesResult_t arr[], unsigned int size);
static void push_RemoteStorageSetUserPublishedFileActionResult_t(lua_State* L, RemoteStorageSetUserPublishedFileActionResult_t s);
static void push_RemoteStorageSetUserPublishedFileActionResult_t_array(lua_State* L, RemoteStorageSetUserPublishedFileActionResult_t arr[], unsigned int size);
static void push_RemoteStorageEnumeratePublishedFilesByUserActionResult_t(lua_State* L, RemoteStorageEnumeratePublishedFilesByUserActionResult_t s);
static void push_RemoteStorageEnumeratePublishedFilesByUserActionResult_t_array(lua_State* L, RemoteStorageEnumeratePublishedFilesByUserActionResult_t arr[], unsigned int size);
static void push_RemoteStoragePublishFileProgress_t(lua_State* L, RemoteStoragePublishFileProgress_t s);
static void push_RemoteStoragePublishFileProgress_t_array(lua_State* L, RemoteStoragePublishFileProgress_t arr[], unsigned int size);
static void push_RemoteStoragePublishedFileUpdated_t(lua_State* L, RemoteStoragePublishedFileUpdated_t s);
static void push_RemoteStoragePublishedFileUpdated_t_array(lua_State* L, RemoteStoragePublishedFileUpdated_t arr[], unsigned int size);
static void push_RemoteStorageFileWriteAsyncComplete_t(lua_State* L, RemoteStorageFileWriteAsyncComplete_t s);
static void push_RemoteStorageFileWriteAsyncComplete_t_array(lua_State* L, RemoteStorageFileWriteAsyncComplete_t arr[], unsigned int size);
static void push_RemoteStorageFileReadAsyncComplete_t(lua_State* L, RemoteStorageFileReadAsyncComplete_t s);
static void push_RemoteStorageFileReadAsyncComplete_t_array(lua_State* L, RemoteStorageFileReadAsyncComplete_t arr[], unsigned int size);
static void push_RemoteStorageLocalFileChange_t(lua_State* L, RemoteStorageLocalFileChange_t s);
static void push_RemoteStorageLocalFileChange_t_array(lua_State* L, RemoteStorageLocalFileChange_t arr[], unsigned int size);
static void push_UserStatsReceived_t(lua_State* L, UserStatsReceived_t s);
static void push_UserStatsReceived_t_array(lua_State* L, UserStatsReceived_t arr[], unsigned int size);
static void push_UserStatsStored_t(lua_State* L, UserStatsStored_t s);
static void push_UserStatsStored_t_array(lua_State* L, UserStatsStored_t arr[], unsigned int size);
static void push_UserAchievementStored_t(lua_State* L, UserAchievementStored_t s);
static void push_UserAchievementStored_t_array(lua_State* L, UserAchievementStored_t arr[], unsigned int size);
static void push_LeaderboardFindResult_t(lua_State* L, LeaderboardFindResult_t s);
static void push_LeaderboardFindResult_t_array(lua_State* L, LeaderboardFindResult_t arr[], unsigned int size);
static void push_LeaderboardScoresDownloaded_t(lua_State* L, LeaderboardScoresDownloaded_t s);
static void push_LeaderboardScoresDownloaded_t_array(lua_State* L, LeaderboardScoresDownloaded_t arr[], unsigned int size);
static void push_LeaderboardScoreUploaded_t(lua_State* L, LeaderboardScoreUploaded_t s);
static void push_LeaderboardScoreUploaded_t_array(lua_State* L, LeaderboardScoreUploaded_t arr[], unsigned int size);
static void push_NumberOfCurrentPlayers_t(lua_State* L, NumberOfCurrentPlayers_t s);
static void push_NumberOfCurrentPlayers_t_array(lua_State* L, NumberOfCurrentPlayers_t arr[], unsigned int size);
static void push_UserStatsUnloaded_t(lua_State* L, UserStatsUnloaded_t s);
static void push_UserStatsUnloaded_t_array(lua_State* L, UserStatsUnloaded_t arr[], unsigned int size);
static void push_UserAchievementIconFetched_t(lua_State* L, UserAchievementIconFetched_t s);
static void push_UserAchievementIconFetched_t_array(lua_State* L, UserAchievementIconFetched_t arr[], unsigned int size);
static void push_GlobalAchievementPercentagesReady_t(lua_State* L, GlobalAchievementPercentagesReady_t s);
static void push_GlobalAchievementPercentagesReady_t_array(lua_State* L, GlobalAchievementPercentagesReady_t arr[], unsigned int size);
static void push_LeaderboardUGCSet_t(lua_State* L, LeaderboardUGCSet_t s);
static void push_LeaderboardUGCSet_t_array(lua_State* L, LeaderboardUGCSet_t arr[], unsigned int size);
static void push_PS3TrophiesInstalled_t(lua_State* L, PS3TrophiesInstalled_t s);
static void push_PS3TrophiesInstalled_t_array(lua_State* L, PS3TrophiesInstalled_t arr[], unsigned int size);
static void push_GlobalStatsReceived_t(lua_State* L, GlobalStatsReceived_t s);
static void push_GlobalStatsReceived_t_array(lua_State* L, GlobalStatsReceived_t arr[], unsigned int size);
static void push_DlcInstalled_t(lua_State* L, DlcInstalled_t s);
static void push_DlcInstalled_t_array(lua_State* L, DlcInstalled_t arr[], unsigned int size);
static void push_RegisterActivationCodeResponse_t(lua_State* L, RegisterActivationCodeResponse_t s);
static void push_RegisterActivationCodeResponse_t_array(lua_State* L, RegisterActivationCodeResponse_t arr[], unsigned int size);
static void push_NewUrlLaunchParameters_t(lua_State* L, NewUrlLaunchParameters_t s);
static void push_NewUrlLaunchParameters_t_array(lua_State* L, NewUrlLaunchParameters_t arr[], unsigned int size);
static void push_AppProofOfPurchaseKeyResponse_t(lua_State* L, AppProofOfPurchaseKeyResponse_t s);
static void push_AppProofOfPurchaseKeyResponse_t_array(lua_State* L, AppProofOfPurchaseKeyResponse_t arr[], unsigned int size);
static void push_FileDetailsResult_t(lua_State* L, FileDetailsResult_t s);
static void push_FileDetailsResult_t_array(lua_State* L, FileDetailsResult_t arr[], unsigned int size);
static void push_TimedTrialStatus_t(lua_State* L, TimedTrialStatus_t s);
static void push_TimedTrialStatus_t_array(lua_State* L, TimedTrialStatus_t arr[], unsigned int size);
static void push_P2PSessionRequest_t(lua_State* L, P2PSessionRequest_t s);
static void push_P2PSessionRequest_t_array(lua_State* L, P2PSessionRequest_t arr[], unsigned int size);
static void push_P2PSessionConnectFail_t(lua_State* L, P2PSessionConnectFail_t s);
static void push_P2PSessionConnectFail_t_array(lua_State* L, P2PSessionConnectFail_t arr[], unsigned int size);
static void push_SocketStatusCallback_t(lua_State* L, SocketStatusCallback_t s);
static void push_SocketStatusCallback_t_array(lua_State* L, SocketStatusCallback_t arr[], unsigned int size);
static void push_ScreenshotReady_t(lua_State* L, ScreenshotReady_t s);
static void push_ScreenshotReady_t_array(lua_State* L, ScreenshotReady_t arr[], unsigned int size);
static void push_ScreenshotRequested_t(lua_State* L, ScreenshotRequested_t s);
static void push_ScreenshotRequested_t_array(lua_State* L, ScreenshotRequested_t arr[], unsigned int size);
static void push_PlaybackStatusHasChanged_t(lua_State* L, PlaybackStatusHasChanged_t s);
static void push_PlaybackStatusHasChanged_t_array(lua_State* L, PlaybackStatusHasChanged_t arr[], unsigned int size);
static void push_VolumeHasChanged_t(lua_State* L, VolumeHasChanged_t s);
static void push_VolumeHasChanged_t_array(lua_State* L, VolumeHasChanged_t arr[], unsigned int size);
static void push_MusicPlayerRemoteWillActivate_t(lua_State* L, MusicPlayerRemoteWillActivate_t s);
static void push_MusicPlayerRemoteWillActivate_t_array(lua_State* L, MusicPlayerRemoteWillActivate_t arr[], unsigned int size);
static void push_MusicPlayerRemoteWillDeactivate_t(lua_State* L, MusicPlayerRemoteWillDeactivate_t s);
static void push_MusicPlayerRemoteWillDeactivate_t_array(lua_State* L, MusicPlayerRemoteWillDeactivate_t arr[], unsigned int size);
static void push_MusicPlayerRemoteToFront_t(lua_State* L, MusicPlayerRemoteToFront_t s);
static void push_MusicPlayerRemoteToFront_t_array(lua_State* L, MusicPlayerRemoteToFront_t arr[], unsigned int size);
static void push_MusicPlayerWillQuit_t(lua_State* L, MusicPlayerWillQuit_t s);
static void push_MusicPlayerWillQuit_t_array(lua_State* L, MusicPlayerWillQuit_t arr[], unsigned int size);
static void push_MusicPlayerWantsPlay_t(lua_State* L, MusicPlayerWantsPlay_t s);
static void push_MusicPlayerWantsPlay_t_array(lua_State* L, MusicPlayerWantsPlay_t arr[], unsigned int size);
static void push_MusicPlayerWantsPause_t(lua_State* L, MusicPlayerWantsPause_t s);
static void push_MusicPlayerWantsPause_t_array(lua_State* L, MusicPlayerWantsPause_t arr[], unsigned int size);
static void push_MusicPlayerWantsPlayPrevious_t(lua_State* L, MusicPlayerWantsPlayPrevious_t s);
static void push_MusicPlayerWantsPlayPrevious_t_array(lua_State* L, MusicPlayerWantsPlayPrevious_t arr[], unsigned int size);
static void push_MusicPlayerWantsPlayNext_t(lua_State* L, MusicPlayerWantsPlayNext_t s);
static void push_MusicPlayerWantsPlayNext_t_array(lua_State* L, MusicPlayerWantsPlayNext_t arr[], unsigned int size);
static void push_MusicPlayerWantsShuffled_t(lua_State* L, MusicPlayerWantsShuffled_t s);
static void push_MusicPlayerWantsShuffled_t_array(lua_State* L, MusicPlayerWantsShuffled_t arr[], unsigned int size);
static void push_MusicPlayerWantsLooped_t(lua_State* L, MusicPlayerWantsLooped_t s);
static void push_MusicPlayerWantsLooped_t_array(lua_State* L, MusicPlayerWantsLooped_t arr[], unsigned int size);
static void push_MusicPlayerWantsVolume_t(lua_State* L, MusicPlayerWantsVolume_t s);
static void push_MusicPlayerWantsVolume_t_array(lua_State* L, MusicPlayerWantsVolume_t arr[], unsigned int size);
static void push_MusicPlayerSelectsQueueEntry_t(lua_State* L, MusicPlayerSelectsQueueEntry_t s);
static void push_MusicPlayerSelectsQueueEntry_t_array(lua_State* L, MusicPlayerSelectsQueueEntry_t arr[], unsigned int size);
static void push_MusicPlayerSelectsPlaylistEntry_t(lua_State* L, MusicPlayerSelectsPlaylistEntry_t s);
static void push_MusicPlayerSelectsPlaylistEntry_t_array(lua_State* L, MusicPlayerSelectsPlaylistEntry_t arr[], unsigned int size);
static void push_MusicPlayerWantsPlayingRepeatStatus_t(lua_State* L, MusicPlayerWantsPlayingRepeatStatus_t s);
static void push_MusicPlayerWantsPlayingRepeatStatus_t_array(lua_State* L, MusicPlayerWantsPlayingRepeatStatus_t arr[], unsigned int size);
static void push_HTTPRequestCompleted_t(lua_State* L, HTTPRequestCompleted_t s);
static void push_HTTPRequestCompleted_t_array(lua_State* L, HTTPRequestCompleted_t arr[], unsigned int size);
static void push_HTTPRequestHeadersReceived_t(lua_State* L, HTTPRequestHeadersReceived_t s);
static void push_HTTPRequestHeadersReceived_t_array(lua_State* L, HTTPRequestHeadersReceived_t arr[], unsigned int size);
static void push_HTTPRequestDataReceived_t(lua_State* L, HTTPRequestDataReceived_t s);
static void push_HTTPRequestDataReceived_t_array(lua_State* L, HTTPRequestDataReceived_t arr[], unsigned int size);
static void push_SteamInputDeviceConnected_t(lua_State* L, SteamInputDeviceConnected_t s);
static void push_SteamInputDeviceConnected_t_array(lua_State* L, SteamInputDeviceConnected_t arr[], unsigned int size);
static void push_SteamInputDeviceDisconnected_t(lua_State* L, SteamInputDeviceDisconnected_t s);
static void push_SteamInputDeviceDisconnected_t_array(lua_State* L, SteamInputDeviceDisconnected_t arr[], unsigned int size);
static void push_SteamInputConfigurationLoaded_t(lua_State* L, SteamInputConfigurationLoaded_t s);
static void push_SteamInputConfigurationLoaded_t_array(lua_State* L, SteamInputConfigurationLoaded_t arr[], unsigned int size);
static void push_SteamUGCQueryCompleted_t(lua_State* L, SteamUGCQueryCompleted_t s);
static void push_SteamUGCQueryCompleted_t_array(lua_State* L, SteamUGCQueryCompleted_t arr[], unsigned int size);
static void push_SteamUGCRequestUGCDetailsResult_t(lua_State* L, SteamUGCRequestUGCDetailsResult_t s);
static void push_SteamUGCRequestUGCDetailsResult_t_array(lua_State* L, SteamUGCRequestUGCDetailsResult_t arr[], unsigned int size);
static void push_CreateItemResult_t(lua_State* L, CreateItemResult_t s);
static void push_CreateItemResult_t_array(lua_State* L, CreateItemResult_t arr[], unsigned int size);
static void push_SubmitItemUpdateResult_t(lua_State* L, SubmitItemUpdateResult_t s);
static void push_SubmitItemUpdateResult_t_array(lua_State* L, SubmitItemUpdateResult_t arr[], unsigned int size);
static void push_ItemInstalled_t(lua_State* L, ItemInstalled_t s);
static void push_ItemInstalled_t_array(lua_State* L, ItemInstalled_t arr[], unsigned int size);
static void push_DownloadItemResult_t(lua_State* L, DownloadItemResult_t s);
static void push_DownloadItemResult_t_array(lua_State* L, DownloadItemResult_t arr[], unsigned int size);
static void push_UserFavoriteItemsListChanged_t(lua_State* L, UserFavoriteItemsListChanged_t s);
static void push_UserFavoriteItemsListChanged_t_array(lua_State* L, UserFavoriteItemsListChanged_t arr[], unsigned int size);
static void push_SetUserItemVoteResult_t(lua_State* L, SetUserItemVoteResult_t s);
static void push_SetUserItemVoteResult_t_array(lua_State* L, SetUserItemVoteResult_t arr[], unsigned int size);
static void push_GetUserItemVoteResult_t(lua_State* L, GetUserItemVoteResult_t s);
static void push_GetUserItemVoteResult_t_array(lua_State* L, GetUserItemVoteResult_t arr[], unsigned int size);
static void push_StartPlaytimeTrackingResult_t(lua_State* L, StartPlaytimeTrackingResult_t s);
static void push_StartPlaytimeTrackingResult_t_array(lua_State* L, StartPlaytimeTrackingResult_t arr[], unsigned int size);
static void push_StopPlaytimeTrackingResult_t(lua_State* L, StopPlaytimeTrackingResult_t s);
static void push_StopPlaytimeTrackingResult_t_array(lua_State* L, StopPlaytimeTrackingResult_t arr[], unsigned int size);
static void push_AddUGCDependencyResult_t(lua_State* L, AddUGCDependencyResult_t s);
static void push_AddUGCDependencyResult_t_array(lua_State* L, AddUGCDependencyResult_t arr[], unsigned int size);
static void push_RemoveUGCDependencyResult_t(lua_State* L, RemoveUGCDependencyResult_t s);
static void push_RemoveUGCDependencyResult_t_array(lua_State* L, RemoveUGCDependencyResult_t arr[], unsigned int size);
static void push_AddAppDependencyResult_t(lua_State* L, AddAppDependencyResult_t s);
static void push_AddAppDependencyResult_t_array(lua_State* L, AddAppDependencyResult_t arr[], unsigned int size);
static void push_RemoveAppDependencyResult_t(lua_State* L, RemoveAppDependencyResult_t s);
static void push_RemoveAppDependencyResult_t_array(lua_State* L, RemoveAppDependencyResult_t arr[], unsigned int size);
static void push_GetAppDependenciesResult_t(lua_State* L, GetAppDependenciesResult_t s);
static void push_GetAppDependenciesResult_t_array(lua_State* L, GetAppDependenciesResult_t arr[], unsigned int size);
static void push_DeleteItemResult_t(lua_State* L, DeleteItemResult_t s);
static void push_DeleteItemResult_t_array(lua_State* L, DeleteItemResult_t arr[], unsigned int size);
static void push_UserSubscribedItemsListChanged_t(lua_State* L, UserSubscribedItemsListChanged_t s);
static void push_UserSubscribedItemsListChanged_t_array(lua_State* L, UserSubscribedItemsListChanged_t arr[], unsigned int size);
static void push_WorkshopEULAStatus_t(lua_State* L, WorkshopEULAStatus_t s);
static void push_WorkshopEULAStatus_t_array(lua_State* L, WorkshopEULAStatus_t arr[], unsigned int size);
static void push_SteamAppInstalled_t(lua_State* L, SteamAppInstalled_t s);
static void push_SteamAppInstalled_t_array(lua_State* L, SteamAppInstalled_t arr[], unsigned int size);
static void push_SteamAppUninstalled_t(lua_State* L, SteamAppUninstalled_t s);
static void push_SteamAppUninstalled_t_array(lua_State* L, SteamAppUninstalled_t arr[], unsigned int size);
static void push_HTML_BrowserReady_t(lua_State* L, HTML_BrowserReady_t s);
static void push_HTML_BrowserReady_t_array(lua_State* L, HTML_BrowserReady_t arr[], unsigned int size);
static void push_HTML_NeedsPaint_t(lua_State* L, HTML_NeedsPaint_t s);
static void push_HTML_NeedsPaint_t_array(lua_State* L, HTML_NeedsPaint_t arr[], unsigned int size);
static void push_HTML_StartRequest_t(lua_State* L, HTML_StartRequest_t s);
static void push_HTML_StartRequest_t_array(lua_State* L, HTML_StartRequest_t arr[], unsigned int size);
static void push_HTML_CloseBrowser_t(lua_State* L, HTML_CloseBrowser_t s);
static void push_HTML_CloseBrowser_t_array(lua_State* L, HTML_CloseBrowser_t arr[], unsigned int size);
static void push_HTML_URLChanged_t(lua_State* L, HTML_URLChanged_t s);
static void push_HTML_URLChanged_t_array(lua_State* L, HTML_URLChanged_t arr[], unsigned int size);
static void push_HTML_FinishedRequest_t(lua_State* L, HTML_FinishedRequest_t s);
static void push_HTML_FinishedRequest_t_array(lua_State* L, HTML_FinishedRequest_t arr[], unsigned int size);
static void push_HTML_OpenLinkInNewTab_t(lua_State* L, HTML_OpenLinkInNewTab_t s);
static void push_HTML_OpenLinkInNewTab_t_array(lua_State* L, HTML_OpenLinkInNewTab_t arr[], unsigned int size);
static void push_HTML_ChangedTitle_t(lua_State* L, HTML_ChangedTitle_t s);
static void push_HTML_ChangedTitle_t_array(lua_State* L, HTML_ChangedTitle_t arr[], unsigned int size);
static void push_HTML_SearchResults_t(lua_State* L, HTML_SearchResults_t s);
static void push_HTML_SearchResults_t_array(lua_State* L, HTML_SearchResults_t arr[], unsigned int size);
static void push_HTML_CanGoBackAndForward_t(lua_State* L, HTML_CanGoBackAndForward_t s);
static void push_HTML_CanGoBackAndForward_t_array(lua_State* L, HTML_CanGoBackAndForward_t arr[], unsigned int size);
static void push_HTML_HorizontalScroll_t(lua_State* L, HTML_HorizontalScroll_t s);
static void push_HTML_HorizontalScroll_t_array(lua_State* L, HTML_HorizontalScroll_t arr[], unsigned int size);
static void push_HTML_VerticalScroll_t(lua_State* L, HTML_VerticalScroll_t s);
static void push_HTML_VerticalScroll_t_array(lua_State* L, HTML_VerticalScroll_t arr[], unsigned int size);
static void push_HTML_LinkAtPosition_t(lua_State* L, HTML_LinkAtPosition_t s);
static void push_HTML_LinkAtPosition_t_array(lua_State* L, HTML_LinkAtPosition_t arr[], unsigned int size);
static void push_HTML_JSAlert_t(lua_State* L, HTML_JSAlert_t s);
static void push_HTML_JSAlert_t_array(lua_State* L, HTML_JSAlert_t arr[], unsigned int size);
static void push_HTML_JSConfirm_t(lua_State* L, HTML_JSConfirm_t s);
static void push_HTML_JSConfirm_t_array(lua_State* L, HTML_JSConfirm_t arr[], unsigned int size);
static void push_HTML_FileOpenDialog_t(lua_State* L, HTML_FileOpenDialog_t s);
static void push_HTML_FileOpenDialog_t_array(lua_State* L, HTML_FileOpenDialog_t arr[], unsigned int size);
static void push_HTML_NewWindow_t(lua_State* L, HTML_NewWindow_t s);
static void push_HTML_NewWindow_t_array(lua_State* L, HTML_NewWindow_t arr[], unsigned int size);
static void push_HTML_SetCursor_t(lua_State* L, HTML_SetCursor_t s);
static void push_HTML_SetCursor_t_array(lua_State* L, HTML_SetCursor_t arr[], unsigned int size);
static void push_HTML_StatusText_t(lua_State* L, HTML_StatusText_t s);
static void push_HTML_StatusText_t_array(lua_State* L, HTML_StatusText_t arr[], unsigned int size);
static void push_HTML_ShowToolTip_t(lua_State* L, HTML_ShowToolTip_t s);
static void push_HTML_ShowToolTip_t_array(lua_State* L, HTML_ShowToolTip_t arr[], unsigned int size);
static void push_HTML_UpdateToolTip_t(lua_State* L, HTML_UpdateToolTip_t s);
static void push_HTML_UpdateToolTip_t_array(lua_State* L, HTML_UpdateToolTip_t arr[], unsigned int size);
static void push_HTML_HideToolTip_t(lua_State* L, HTML_HideToolTip_t s);
static void push_HTML_HideToolTip_t_array(lua_State* L, HTML_HideToolTip_t arr[], unsigned int size);
static void push_HTML_BrowserRestarted_t(lua_State* L, HTML_BrowserRestarted_t s);
static void push_HTML_BrowserRestarted_t_array(lua_State* L, HTML_BrowserRestarted_t arr[], unsigned int size);
static void push_SteamInventoryResultReady_t(lua_State* L, SteamInventoryResultReady_t s);
static void push_SteamInventoryResultReady_t_array(lua_State* L, SteamInventoryResultReady_t arr[], unsigned int size);
static void push_SteamInventoryFullUpdate_t(lua_State* L, SteamInventoryFullUpdate_t s);
static void push_SteamInventoryFullUpdate_t_array(lua_State* L, SteamInventoryFullUpdate_t arr[], unsigned int size);
static void push_SteamInventoryDefinitionUpdate_t(lua_State* L, SteamInventoryDefinitionUpdate_t s);
static void push_SteamInventoryDefinitionUpdate_t_array(lua_State* L, SteamInventoryDefinitionUpdate_t arr[], unsigned int size);
static void push_SteamInventoryEligiblePromoItemDefIDs_t(lua_State* L, SteamInventoryEligiblePromoItemDefIDs_t s);
static void push_SteamInventoryEligiblePromoItemDefIDs_t_array(lua_State* L, SteamInventoryEligiblePromoItemDefIDs_t arr[], unsigned int size);
static void push_SteamInventoryStartPurchaseResult_t(lua_State* L, SteamInventoryStartPurchaseResult_t s);
static void push_SteamInventoryStartPurchaseResult_t_array(lua_State* L, SteamInventoryStartPurchaseResult_t arr[], unsigned int size);
static void push_SteamInventoryRequestPricesResult_t(lua_State* L, SteamInventoryRequestPricesResult_t s);
static void push_SteamInventoryRequestPricesResult_t_array(lua_State* L, SteamInventoryRequestPricesResult_t arr[], unsigned int size);
static void push_GetVideoURLResult_t(lua_State* L, GetVideoURLResult_t s);
static void push_GetVideoURLResult_t_array(lua_State* L, GetVideoURLResult_t arr[], unsigned int size);
static void push_GetOPFSettingsResult_t(lua_State* L, GetOPFSettingsResult_t s);
static void push_GetOPFSettingsResult_t_array(lua_State* L, GetOPFSettingsResult_t arr[], unsigned int size);
static void push_SteamParentalSettingsChanged_t(lua_State* L, SteamParentalSettingsChanged_t s);
static void push_SteamParentalSettingsChanged_t_array(lua_State* L, SteamParentalSettingsChanged_t arr[], unsigned int size);
static void push_SteamRemotePlaySessionConnected_t(lua_State* L, SteamRemotePlaySessionConnected_t s);
static void push_SteamRemotePlaySessionConnected_t_array(lua_State* L, SteamRemotePlaySessionConnected_t arr[], unsigned int size);
static void push_SteamRemotePlaySessionDisconnected_t(lua_State* L, SteamRemotePlaySessionDisconnected_t s);
static void push_SteamRemotePlaySessionDisconnected_t_array(lua_State* L, SteamRemotePlaySessionDisconnected_t arr[], unsigned int size);
static void push_SteamNetworkingMessagesSessionRequest_t(lua_State* L, SteamNetworkingMessagesSessionRequest_t s);
static void push_SteamNetworkingMessagesSessionRequest_t_array(lua_State* L, SteamNetworkingMessagesSessionRequest_t arr[], unsigned int size);
static void push_SteamNetworkingMessagesSessionFailed_t(lua_State* L, SteamNetworkingMessagesSessionFailed_t s);
static void push_SteamNetworkingMessagesSessionFailed_t_array(lua_State* L, SteamNetworkingMessagesSessionFailed_t arr[], unsigned int size);
static void push_SteamNetConnectionStatusChangedCallback_t(lua_State* L, SteamNetConnectionStatusChangedCallback_t s);
static void push_SteamNetConnectionStatusChangedCallback_t_array(lua_State* L, SteamNetConnectionStatusChangedCallback_t arr[], unsigned int size);
static void push_SteamNetAuthenticationStatus_t(lua_State* L, SteamNetAuthenticationStatus_t s);
static void push_SteamNetAuthenticationStatus_t_array(lua_State* L, SteamNetAuthenticationStatus_t arr[], unsigned int size);
static void push_SteamRelayNetworkStatus_t(lua_State* L, SteamRelayNetworkStatus_t s);
static void push_SteamRelayNetworkStatus_t_array(lua_State* L, SteamRelayNetworkStatus_t arr[], unsigned int size);
static void push_GSClientApprove_t(lua_State* L, GSClientApprove_t s);
static void push_GSClientApprove_t_array(lua_State* L, GSClientApprove_t arr[], unsigned int size);
static void push_GSClientDeny_t(lua_State* L, GSClientDeny_t s);
static void push_GSClientDeny_t_array(lua_State* L, GSClientDeny_t arr[], unsigned int size);
static void push_GSClientKick_t(lua_State* L, GSClientKick_t s);
static void push_GSClientKick_t_array(lua_State* L, GSClientKick_t arr[], unsigned int size);
static void push_GSClientAchievementStatus_t(lua_State* L, GSClientAchievementStatus_t s);
static void push_GSClientAchievementStatus_t_array(lua_State* L, GSClientAchievementStatus_t arr[], unsigned int size);
static void push_GSPolicyResponse_t(lua_State* L, GSPolicyResponse_t s);
static void push_GSPolicyResponse_t_array(lua_State* L, GSPolicyResponse_t arr[], unsigned int size);
static void push_GSGameplayStats_t(lua_State* L, GSGameplayStats_t s);
static void push_GSGameplayStats_t_array(lua_State* L, GSGameplayStats_t arr[], unsigned int size);
static void push_GSClientGroupStatus_t(lua_State* L, GSClientGroupStatus_t s);
static void push_GSClientGroupStatus_t_array(lua_State* L, GSClientGroupStatus_t arr[], unsigned int size);
static void push_GSReputation_t(lua_State* L, GSReputation_t s);
static void push_GSReputation_t_array(lua_State* L, GSReputation_t arr[], unsigned int size);
static void push_AssociateWithClanResult_t(lua_State* L, AssociateWithClanResult_t s);
static void push_AssociateWithClanResult_t_array(lua_State* L, AssociateWithClanResult_t arr[], unsigned int size);
static void push_ComputeNewPlayerCompatibilityResult_t(lua_State* L, ComputeNewPlayerCompatibilityResult_t s);
static void push_ComputeNewPlayerCompatibilityResult_t_array(lua_State* L, ComputeNewPlayerCompatibilityResult_t arr[], unsigned int size);
static void push_GSStatsReceived_t(lua_State* L, GSStatsReceived_t s);
static void push_GSStatsReceived_t_array(lua_State* L, GSStatsReceived_t arr[], unsigned int size);
static void push_GSStatsStored_t(lua_State* L, GSStatsStored_t s);
static void push_GSStatsStored_t_array(lua_State* L, GSStatsStored_t arr[], unsigned int size);
static void push_GSStatsUnloaded_t(lua_State* L, GSStatsUnloaded_t s);
static void push_GSStatsUnloaded_t_array(lua_State* L, GSStatsUnloaded_t arr[], unsigned int size);


static lua_Number check_int(lua_State* L, int index);
static lua_Number check_bool(lua_State* L, int index);
static lua_Number check_float(lua_State* L, int index);
static void check_float_array(lua_State* L, int index, float * arr, unsigned int size);
static lua_Number check_double(lua_State* L, int index);
static uint8 check_uint8(lua_State* L, int index);
static void check_uint8_array(lua_State* L, int index, uint8 * arr, unsigned int size);
static int8 check_int8(lua_State* L, int index);
static void check_int8_array(lua_State* L, int index, int8 * arr, unsigned int size);
static int16 check_int16(lua_State* L, int index);
static void check_int16_array(lua_State* L, int index, int16 * arr, unsigned int size);
static uint16 check_uint16(lua_State* L, int index);
static void check_uint16_array(lua_State* L, int index, uint16 * arr, unsigned int size);
static int32 check_int32(lua_State* L, int index);
static void check_int32_array(lua_State* L, int index, int32 * arr, unsigned int size);
static uint32 check_uint32(lua_State* L, int index);
static void check_uint32_array(lua_State* L, int index, uint32 * arr, unsigned int size);
static AppId_t check_AppId_t(lua_State* L, int index);
static void check_AppId_t_array(lua_State* L, int index, AppId_t * arr, unsigned int size);
static DepotId_t check_DepotId_t(lua_State* L, int index);
static void check_DepotId_t_array(lua_State* L, int index, DepotId_t * arr, unsigned int size);
static RTime32 check_RTime32(lua_State* L, int index);
static void check_RTime32_array(lua_State* L, int index, RTime32 * arr, unsigned int size);
static AccountID_t check_AccountID_t(lua_State* L, int index);
static void check_AccountID_t_array(lua_State* L, int index, AccountID_t * arr, unsigned int size);
static HAuthTicket check_HAuthTicket(lua_State* L, int index);
static void check_HAuthTicket_array(lua_State* L, int index, HAuthTicket * arr, unsigned int size);
static HSteamPipe check_HSteamPipe(lua_State* L, int index);
static void check_HSteamPipe_array(lua_State* L, int index, HSteamPipe * arr, unsigned int size);
static HSteamUser check_HSteamUser(lua_State* L, int index);
static void check_HSteamUser_array(lua_State* L, int index, HSteamUser * arr, unsigned int size);
static FriendsGroupID_t check_FriendsGroupID_t(lua_State* L, int index);
static void check_FriendsGroupID_t_array(lua_State* L, int index, FriendsGroupID_t * arr, unsigned int size);
static HServerQuery check_HServerQuery(lua_State* L, int index);
static void check_HServerQuery_array(lua_State* L, int index, HServerQuery * arr, unsigned int size);
static SNetSocket_t check_SNetSocket_t(lua_State* L, int index);
static void check_SNetSocket_t_array(lua_State* L, int index, SNetSocket_t * arr, unsigned int size);
static SNetListenSocket_t check_SNetListenSocket_t(lua_State* L, int index);
static void check_SNetListenSocket_t_array(lua_State* L, int index, SNetListenSocket_t * arr, unsigned int size);
static ScreenshotHandle check_ScreenshotHandle(lua_State* L, int index);
static void check_ScreenshotHandle_array(lua_State* L, int index, ScreenshotHandle * arr, unsigned int size);
static HTTPRequestHandle check_HTTPRequestHandle(lua_State* L, int index);
static void check_HTTPRequestHandle_array(lua_State* L, int index, HTTPRequestHandle * arr, unsigned int size);
static HTTPCookieContainerHandle check_HTTPCookieContainerHandle(lua_State* L, int index);
static void check_HTTPCookieContainerHandle_array(lua_State* L, int index, HTTPCookieContainerHandle * arr, unsigned int size);
static HHTMLBrowser check_HHTMLBrowser(lua_State* L, int index);
static void check_HHTMLBrowser_array(lua_State* L, int index, HHTMLBrowser * arr, unsigned int size);
static SteamItemDef_t check_SteamItemDef_t(lua_State* L, int index);
static void check_SteamItemDef_t_array(lua_State* L, int index, SteamItemDef_t * arr, unsigned int size);
static SteamInventoryResult_t check_SteamInventoryResult_t(lua_State* L, int index);
static void check_SteamInventoryResult_t_array(lua_State* L, int index, SteamInventoryResult_t * arr, unsigned int size);
static RemotePlaySessionID_t check_RemotePlaySessionID_t(lua_State* L, int index);
static void check_RemotePlaySessionID_t_array(lua_State* L, int index, RemotePlaySessionID_t * arr, unsigned int size);
static HSteamNetConnection check_HSteamNetConnection(lua_State* L, int index);
static void check_HSteamNetConnection_array(lua_State* L, int index, HSteamNetConnection * arr, unsigned int size);
static HSteamListenSocket check_HSteamListenSocket(lua_State* L, int index);
static void check_HSteamListenSocket_array(lua_State* L, int index, HSteamListenSocket * arr, unsigned int size);
static HSteamNetPollGroup check_HSteamNetPollGroup(lua_State* L, int index);
static void check_HSteamNetPollGroup_array(lua_State* L, int index, HSteamNetPollGroup * arr, unsigned int size);
static SteamNetworkingPOPID check_SteamNetworkingPOPID(lua_State* L, int index);
static void check_SteamNetworkingPOPID_array(lua_State* L, int index, SteamNetworkingPOPID * arr, unsigned int size);

static const char * check_const_char_ptr(lua_State* L, int index);
static char * check_char_ptr(lua_State* L, int index);
static const void * check_const_void_ptr(lua_State* L, int index);
static void * check_void_ptr(lua_State* L, int index);
static void check_char_array(lua_State* L, int index, char* dest, unsigned int size);
static uint64 check_uint64(lua_State* L, int index);
static int64 check_int64(lua_State* L, int index);
static void check_uint64_array(lua_State* L, int index, uint64 * arr, unsigned int size);
static ulint64 check_ulint64(lua_State* L, int index);
static void check_ulint64_array(lua_State* L, int index, ulint64 * arr, unsigned int size);
static uintp check_uintp(lua_State* L, int index);
static void check_uintp_array(lua_State* L, int index, uintp * arr, unsigned int size);
static SteamAPICall_t check_SteamAPICall_t(lua_State* L, int index);
static void check_SteamAPICall_t_array(lua_State* L, int index, SteamAPICall_t * arr, unsigned int size);
static PartyBeaconID_t check_PartyBeaconID_t(lua_State* L, int index);
static void check_PartyBeaconID_t_array(lua_State* L, int index, PartyBeaconID_t * arr, unsigned int size);
static UGCHandle_t check_UGCHandle_t(lua_State* L, int index);
static void check_UGCHandle_t_array(lua_State* L, int index, UGCHandle_t * arr, unsigned int size);
static PublishedFileUpdateHandle_t check_PublishedFileUpdateHandle_t(lua_State* L, int index);
static void check_PublishedFileUpdateHandle_t_array(lua_State* L, int index, PublishedFileUpdateHandle_t * arr, unsigned int size);
static PublishedFileId_t check_PublishedFileId_t(lua_State* L, int index);
static void check_PublishedFileId_t_array(lua_State* L, int index, PublishedFileId_t * arr, unsigned int size);
static UGCFileWriteStreamHandle_t check_UGCFileWriteStreamHandle_t(lua_State* L, int index);
static void check_UGCFileWriteStreamHandle_t_array(lua_State* L, int index, UGCFileWriteStreamHandle_t * arr, unsigned int size);
static SteamLeaderboard_t check_SteamLeaderboard_t(lua_State* L, int index);
static void check_SteamLeaderboard_t_array(lua_State* L, int index, SteamLeaderboard_t * arr, unsigned int size);
static SteamLeaderboardEntries_t check_SteamLeaderboardEntries_t(lua_State* L, int index);
static void check_SteamLeaderboardEntries_t_array(lua_State* L, int index, SteamLeaderboardEntries_t * arr, unsigned int size);
static InputHandle_t check_InputHandle_t(lua_State* L, int index);
static void check_InputHandle_t_array(lua_State* L, int index, InputHandle_t * arr, unsigned int size);
static InputActionSetHandle_t check_InputActionSetHandle_t(lua_State* L, int index);
static void check_InputActionSetHandle_t_array(lua_State* L, int index, InputActionSetHandle_t * arr, unsigned int size);
static InputDigitalActionHandle_t check_InputDigitalActionHandle_t(lua_State* L, int index);
static void check_InputDigitalActionHandle_t_array(lua_State* L, int index, InputDigitalActionHandle_t * arr, unsigned int size);
static InputAnalogActionHandle_t check_InputAnalogActionHandle_t(lua_State* L, int index);
static void check_InputAnalogActionHandle_t_array(lua_State* L, int index, InputAnalogActionHandle_t * arr, unsigned int size);
static ControllerHandle_t check_ControllerHandle_t(lua_State* L, int index);
static void check_ControllerHandle_t_array(lua_State* L, int index, ControllerHandle_t * arr, unsigned int size);
static ControllerActionSetHandle_t check_ControllerActionSetHandle_t(lua_State* L, int index);
static void check_ControllerActionSetHandle_t_array(lua_State* L, int index, ControllerActionSetHandle_t * arr, unsigned int size);
static ControllerDigitalActionHandle_t check_ControllerDigitalActionHandle_t(lua_State* L, int index);
static void check_ControllerDigitalActionHandle_t_array(lua_State* L, int index, ControllerDigitalActionHandle_t * arr, unsigned int size);
static ControllerAnalogActionHandle_t check_ControllerAnalogActionHandle_t(lua_State* L, int index);
static void check_ControllerAnalogActionHandle_t_array(lua_State* L, int index, ControllerAnalogActionHandle_t * arr, unsigned int size);
static UGCQueryHandle_t check_UGCQueryHandle_t(lua_State* L, int index);
static void check_UGCQueryHandle_t_array(lua_State* L, int index, UGCQueryHandle_t * arr, unsigned int size);
static UGCUpdateHandle_t check_UGCUpdateHandle_t(lua_State* L, int index);
static void check_UGCUpdateHandle_t_array(lua_State* L, int index, UGCUpdateHandle_t * arr, unsigned int size);
static SteamItemInstanceID_t check_SteamItemInstanceID_t(lua_State* L, int index);
static void check_SteamItemInstanceID_t_array(lua_State* L, int index, SteamItemInstanceID_t * arr, unsigned int size);
static SteamInventoryUpdateHandle_t check_SteamInventoryUpdateHandle_t(lua_State* L, int index);
static void check_SteamInventoryUpdateHandle_t_array(lua_State* L, int index, SteamInventoryUpdateHandle_t * arr, unsigned int size);
static lint64 check_lint64(lua_State* L, int index);
static void check_lint64_array(lua_State* L, int index, lint64 * arr, unsigned int size);
static intp check_intp(lua_State* L, int index);
static void check_intp_array(lua_State* L, int index, intp * arr, unsigned int size);
static SteamNetworkingMicroseconds check_SteamNetworkingMicroseconds(lua_State* L, int index);
static void check_SteamNetworkingMicroseconds_array(lua_State* L, int index, SteamNetworkingMicroseconds * arr, unsigned int size);

static ESteamIPType check_ESteamIPType(lua_State* L, int index);
static EUniverse check_EUniverse(lua_State* L, int index);
static EResult check_EResult(lua_State* L, int index);
static EVoiceResult check_EVoiceResult(lua_State* L, int index);
static EDenyReason check_EDenyReason(lua_State* L, int index);
static EBeginAuthSessionResult check_EBeginAuthSessionResult(lua_State* L, int index);
static EAuthSessionResponse check_EAuthSessionResponse(lua_State* L, int index);
static EUserHasLicenseForAppResult check_EUserHasLicenseForAppResult(lua_State* L, int index);
static EAccountType check_EAccountType(lua_State* L, int index);
static EChatEntryType check_EChatEntryType(lua_State* L, int index);
static EChatRoomEnterResponse check_EChatRoomEnterResponse(lua_State* L, int index);
static EChatSteamIDInstanceFlags check_EChatSteamIDInstanceFlags(lua_State* L, int index);
static ENotificationPosition check_ENotificationPosition(lua_State* L, int index);
static EBroadcastUploadResult check_EBroadcastUploadResult(lua_State* L, int index);
static EMarketNotAllowedReasonFlags check_EMarketNotAllowedReasonFlags(lua_State* L, int index);
static EDurationControlProgress check_EDurationControlProgress(lua_State* L, int index);
static EDurationControlNotification check_EDurationControlNotification(lua_State* L, int index);
static EDurationControlOnlineState check_EDurationControlOnlineState(lua_State* L, int index);
static EGameSearchErrorCode_t check_EGameSearchErrorCode_t(lua_State* L, int index);
static EPlayerResult_t check_EPlayerResult_t(lua_State* L, int index);
static ESteamIPv6ConnectivityProtocol check_ESteamIPv6ConnectivityProtocol(lua_State* L, int index);
static ESteamIPv6ConnectivityState check_ESteamIPv6ConnectivityState(lua_State* L, int index);
static EFriendRelationship check_EFriendRelationship(lua_State* L, int index);
static EPersonaState check_EPersonaState(lua_State* L, int index);
static EFriendFlags check_EFriendFlags(lua_State* L, int index);
static EUserRestriction check_EUserRestriction(lua_State* L, int index);
static EOverlayToStoreFlag check_EOverlayToStoreFlag(lua_State* L, int index);
static EActivateGameOverlayToWebPageMode check_EActivateGameOverlayToWebPageMode(lua_State* L, int index);
static ECommunityProfileItemType check_ECommunityProfileItemType(lua_State* L, int index);
static ECommunityProfileItemProperty check_ECommunityProfileItemProperty(lua_State* L, int index);
static EPersonaChange check_EPersonaChange(lua_State* L, int index);
static ESteamAPICallFailure check_ESteamAPICallFailure(lua_State* L, int index);
static EGamepadTextInputMode check_EGamepadTextInputMode(lua_State* L, int index);
static EGamepadTextInputLineMode check_EGamepadTextInputLineMode(lua_State* L, int index);
static EFloatingGamepadTextInputMode check_EFloatingGamepadTextInputMode(lua_State* L, int index);
static ETextFilteringContext check_ETextFilteringContext(lua_State* L, int index);
static ECheckFileSignature check_ECheckFileSignature(lua_State* L, int index);
static EMatchMakingServerResponse check_EMatchMakingServerResponse(lua_State* L, int index);
static ELobbyType check_ELobbyType(lua_State* L, int index);
static ELobbyComparison check_ELobbyComparison(lua_State* L, int index);
static ELobbyDistanceFilter check_ELobbyDistanceFilter(lua_State* L, int index);
static EChatMemberStateChange check_EChatMemberStateChange(lua_State* L, int index);
static ESteamPartyBeaconLocationType check_ESteamPartyBeaconLocationType(lua_State* L, int index);
static ESteamPartyBeaconLocationData check_ESteamPartyBeaconLocationData(lua_State* L, int index);
static ERemoteStoragePlatform check_ERemoteStoragePlatform(lua_State* L, int index);
static ERemoteStoragePublishedFileVisibility check_ERemoteStoragePublishedFileVisibility(lua_State* L, int index);
static EWorkshopFileType check_EWorkshopFileType(lua_State* L, int index);
static EWorkshopVote check_EWorkshopVote(lua_State* L, int index);
static EWorkshopFileAction check_EWorkshopFileAction(lua_State* L, int index);
static EWorkshopEnumerationType check_EWorkshopEnumerationType(lua_State* L, int index);
static EWorkshopVideoProvider check_EWorkshopVideoProvider(lua_State* L, int index);
static EUGCReadAction check_EUGCReadAction(lua_State* L, int index);
static ERemoteStorageLocalFileChange check_ERemoteStorageLocalFileChange(lua_State* L, int index);
static ERemoteStorageFilePathType check_ERemoteStorageFilePathType(lua_State* L, int index);
static ELeaderboardDataRequest check_ELeaderboardDataRequest(lua_State* L, int index);
static ELeaderboardSortMethod check_ELeaderboardSortMethod(lua_State* L, int index);
static ELeaderboardDisplayType check_ELeaderboardDisplayType(lua_State* L, int index);
static ELeaderboardUploadScoreMethod check_ELeaderboardUploadScoreMethod(lua_State* L, int index);
static ERegisterActivationCodeResult check_ERegisterActivationCodeResult(lua_State* L, int index);
static EP2PSessionError check_EP2PSessionError(lua_State* L, int index);
static EP2PSend check_EP2PSend(lua_State* L, int index);
static ESNetSocketState check_ESNetSocketState(lua_State* L, int index);
static ESNetSocketConnectionType check_ESNetSocketConnectionType(lua_State* L, int index);
static EVRScreenshotType check_EVRScreenshotType(lua_State* L, int index);
static AudioPlayback_Status check_AudioPlayback_Status(lua_State* L, int index);
static EHTTPMethod check_EHTTPMethod(lua_State* L, int index);
static EHTTPStatusCode check_EHTTPStatusCode(lua_State* L, int index);
static EInputSourceMode check_EInputSourceMode(lua_State* L, int index);
static EInputActionOrigin check_EInputActionOrigin(lua_State* L, int index);
static EXboxOrigin check_EXboxOrigin(lua_State* L, int index);
static ESteamControllerPad check_ESteamControllerPad(lua_State* L, int index);
static EControllerHapticLocation check_EControllerHapticLocation(lua_State* L, int index);
static EControllerHapticType check_EControllerHapticType(lua_State* L, int index);
static ESteamInputType check_ESteamInputType(lua_State* L, int index);
static ESteamInputConfigurationEnableType check_ESteamInputConfigurationEnableType(lua_State* L, int index);
static ESteamInputLEDFlag check_ESteamInputLEDFlag(lua_State* L, int index);
static ESteamInputGlyphSize check_ESteamInputGlyphSize(lua_State* L, int index);
static ESteamInputGlyphStyle check_ESteamInputGlyphStyle(lua_State* L, int index);
static ESteamInputActionEventType check_ESteamInputActionEventType(lua_State* L, int index);
static EControllerActionOrigin check_EControllerActionOrigin(lua_State* L, int index);
static ESteamControllerLEDFlag check_ESteamControllerLEDFlag(lua_State* L, int index);
static EUGCMatchingUGCType check_EUGCMatchingUGCType(lua_State* L, int index);
static EUserUGCList check_EUserUGCList(lua_State* L, int index);
static EUserUGCListSortOrder check_EUserUGCListSortOrder(lua_State* L, int index);
static EUGCQuery check_EUGCQuery(lua_State* L, int index);
static EItemUpdateStatus check_EItemUpdateStatus(lua_State* L, int index);
static EItemState check_EItemState(lua_State* L, int index);
static EItemStatistic check_EItemStatistic(lua_State* L, int index);
static EItemPreviewType check_EItemPreviewType(lua_State* L, int index);
static ESteamItemFlags check_ESteamItemFlags(lua_State* L, int index);
static EParentalFeature check_EParentalFeature(lua_State* L, int index);
static ESteamDeviceFormFactor check_ESteamDeviceFormFactor(lua_State* L, int index);
static ESteamNetworkingAvailability check_ESteamNetworkingAvailability(lua_State* L, int index);
static ESteamNetworkingIdentityType check_ESteamNetworkingIdentityType(lua_State* L, int index);
static ESteamNetworkingFakeIPType check_ESteamNetworkingFakeIPType(lua_State* L, int index);
static ESteamNetworkingConnectionState check_ESteamNetworkingConnectionState(lua_State* L, int index);
static ESteamNetConnectionEnd check_ESteamNetConnectionEnd(lua_State* L, int index);
static ESteamNetworkingConfigScope check_ESteamNetworkingConfigScope(lua_State* L, int index);
static ESteamNetworkingConfigDataType check_ESteamNetworkingConfigDataType(lua_State* L, int index);
static ESteamNetworkingConfigValue check_ESteamNetworkingConfigValue(lua_State* L, int index);
static ESteamNetworkingGetConfigValueResult check_ESteamNetworkingGetConfigValueResult(lua_State* L, int index);
static ESteamNetworkingSocketsDebugOutputType check_ESteamNetworkingSocketsDebugOutputType(lua_State* L, int index);
static EServerMode check_EServerMode(lua_State* L, int index);
static IPCFailure_t::EFailureType check_EFailureType(lua_State* L, int index);
static RequestPlayersForGameResultCallback_t::PlayerAcceptState_t check_PlayerAcceptState_t(lua_State* L, int index);

static dmScript::LuaHBuffer * check_buffer(lua_State* L, int index);
static CSteamID check_CSteamID(lua_State* L, int index);
static CSteamID check_class_CSteamID(lua_State* L, int index);
static void check_CSteamID_array(lua_State* L, int index, CSteamID *ids, int size);
static CGameID check_CGameID(lua_State* L, int index);
static servernetadr_t check_servernetadr_t(lua_State* L, int index);
static SteamParamStringArray_t check_const_struct_SteamParamStringArray_t(lua_State* L, int index);

static SteamIPAddress_t check_SteamIPAddress_t(lua_State* L, int index);
static void check_SteamIPAddress_t_array(lua_State* L, int index, SteamIPAddress_t *s, int size);
static FriendGameInfo_t check_FriendGameInfo_t(lua_State* L, int index);
static void check_FriendGameInfo_t_array(lua_State* L, int index, FriendGameInfo_t *s, int size);
static MatchMakingKeyValuePair_t check_MatchMakingKeyValuePair_t(lua_State* L, int index);
static void check_MatchMakingKeyValuePair_t_array(lua_State* L, int index, MatchMakingKeyValuePair_t *s, int size);
static SteamPartyBeaconLocation_t check_SteamPartyBeaconLocation_t(lua_State* L, int index);
static void check_SteamPartyBeaconLocation_t_array(lua_State* L, int index, SteamPartyBeaconLocation_t *s, int size);
static LeaderboardEntry_t check_LeaderboardEntry_t(lua_State* L, int index);
static void check_LeaderboardEntry_t_array(lua_State* L, int index, LeaderboardEntry_t *s, int size);
static P2PSessionState_t check_P2PSessionState_t(lua_State* L, int index);
static void check_P2PSessionState_t_array(lua_State* L, int index, P2PSessionState_t *s, int size);
static InputAnalogActionData_t check_InputAnalogActionData_t(lua_State* L, int index);
static void check_InputAnalogActionData_t_array(lua_State* L, int index, InputAnalogActionData_t *s, int size);
static InputDigitalActionData_t check_InputDigitalActionData_t(lua_State* L, int index);
static void check_InputDigitalActionData_t_array(lua_State* L, int index, InputDigitalActionData_t *s, int size);
static InputMotionData_t check_InputMotionData_t(lua_State* L, int index);
static void check_InputMotionData_t_array(lua_State* L, int index, InputMotionData_t *s, int size);
static SteamUGCDetails_t check_SteamUGCDetails_t(lua_State* L, int index);
static void check_SteamUGCDetails_t_array(lua_State* L, int index, SteamUGCDetails_t *s, int size);
static SteamItemDetails_t check_SteamItemDetails_t(lua_State* L, int index);
static void check_SteamItemDetails_t_array(lua_State* L, int index, SteamItemDetails_t *s, int size);
static SteamNetworkingIPAddr check_SteamNetworkingIPAddr(lua_State* L, int index);
static void check_SteamNetworkingIPAddr_array(lua_State* L, int index, SteamNetworkingIPAddr *s, int size);
static SteamNetworkingIdentity check_SteamNetworkingIdentity(lua_State* L, int index);
static void check_SteamNetworkingIdentity_array(lua_State* L, int index, SteamNetworkingIdentity *s, int size);
static SteamNetConnectionInfo_t check_SteamNetConnectionInfo_t(lua_State* L, int index);
static void check_SteamNetConnectionInfo_t_array(lua_State* L, int index, SteamNetConnectionInfo_t *s, int size);
static SteamNetConnectionRealTimeStatus_t check_SteamNetConnectionRealTimeStatus_t(lua_State* L, int index);
static void check_SteamNetConnectionRealTimeStatus_t_array(lua_State* L, int index, SteamNetConnectionRealTimeStatus_t *s, int size);
static SteamNetConnectionRealTimeLaneStatus_t check_SteamNetConnectionRealTimeLaneStatus_t(lua_State* L, int index);
static void check_SteamNetConnectionRealTimeLaneStatus_t_array(lua_State* L, int index, SteamNetConnectionRealTimeLaneStatus_t *s, int size);
static SteamNetworkPingLocation_t check_SteamNetworkPingLocation_t(lua_State* L, int index);
static void check_SteamNetworkPingLocation_t_array(lua_State* L, int index, SteamNetworkPingLocation_t *s, int size);
static SteamServersConnected_t check_SteamServersConnected_t(lua_State* L, int index);
static void check_SteamServersConnected_t_array(lua_State* L, int index, SteamServersConnected_t *s, int size);
static SteamServerConnectFailure_t check_SteamServerConnectFailure_t(lua_State* L, int index);
static void check_SteamServerConnectFailure_t_array(lua_State* L, int index, SteamServerConnectFailure_t *s, int size);
static SteamServersDisconnected_t check_SteamServersDisconnected_t(lua_State* L, int index);
static void check_SteamServersDisconnected_t_array(lua_State* L, int index, SteamServersDisconnected_t *s, int size);
static ClientGameServerDeny_t check_ClientGameServerDeny_t(lua_State* L, int index);
static void check_ClientGameServerDeny_t_array(lua_State* L, int index, ClientGameServerDeny_t *s, int size);
static IPCFailure_t check_IPCFailure_t(lua_State* L, int index);
static void check_IPCFailure_t_array(lua_State* L, int index, IPCFailure_t *s, int size);
static LicensesUpdated_t check_LicensesUpdated_t(lua_State* L, int index);
static void check_LicensesUpdated_t_array(lua_State* L, int index, LicensesUpdated_t *s, int size);
static ValidateAuthTicketResponse_t check_ValidateAuthTicketResponse_t(lua_State* L, int index);
static void check_ValidateAuthTicketResponse_t_array(lua_State* L, int index, ValidateAuthTicketResponse_t *s, int size);
static MicroTxnAuthorizationResponse_t check_MicroTxnAuthorizationResponse_t(lua_State* L, int index);
static void check_MicroTxnAuthorizationResponse_t_array(lua_State* L, int index, MicroTxnAuthorizationResponse_t *s, int size);
static EncryptedAppTicketResponse_t check_EncryptedAppTicketResponse_t(lua_State* L, int index);
static void check_EncryptedAppTicketResponse_t_array(lua_State* L, int index, EncryptedAppTicketResponse_t *s, int size);
static GetAuthSessionTicketResponse_t check_GetAuthSessionTicketResponse_t(lua_State* L, int index);
static void check_GetAuthSessionTicketResponse_t_array(lua_State* L, int index, GetAuthSessionTicketResponse_t *s, int size);
static GameWebCallback_t check_GameWebCallback_t(lua_State* L, int index);
static void check_GameWebCallback_t_array(lua_State* L, int index, GameWebCallback_t *s, int size);
static StoreAuthURLResponse_t check_StoreAuthURLResponse_t(lua_State* L, int index);
static void check_StoreAuthURLResponse_t_array(lua_State* L, int index, StoreAuthURLResponse_t *s, int size);
static MarketEligibilityResponse_t check_MarketEligibilityResponse_t(lua_State* L, int index);
static void check_MarketEligibilityResponse_t_array(lua_State* L, int index, MarketEligibilityResponse_t *s, int size);
static DurationControl_t check_DurationControl_t(lua_State* L, int index);
static void check_DurationControl_t_array(lua_State* L, int index, DurationControl_t *s, int size);
static PersonaStateChange_t check_PersonaStateChange_t(lua_State* L, int index);
static void check_PersonaStateChange_t_array(lua_State* L, int index, PersonaStateChange_t *s, int size);
static GameOverlayActivated_t check_GameOverlayActivated_t(lua_State* L, int index);
static void check_GameOverlayActivated_t_array(lua_State* L, int index, GameOverlayActivated_t *s, int size);
static GameServerChangeRequested_t check_GameServerChangeRequested_t(lua_State* L, int index);
static void check_GameServerChangeRequested_t_array(lua_State* L, int index, GameServerChangeRequested_t *s, int size);
static GameLobbyJoinRequested_t check_GameLobbyJoinRequested_t(lua_State* L, int index);
static void check_GameLobbyJoinRequested_t_array(lua_State* L, int index, GameLobbyJoinRequested_t *s, int size);
static AvatarImageLoaded_t check_AvatarImageLoaded_t(lua_State* L, int index);
static void check_AvatarImageLoaded_t_array(lua_State* L, int index, AvatarImageLoaded_t *s, int size);
static ClanOfficerListResponse_t check_ClanOfficerListResponse_t(lua_State* L, int index);
static void check_ClanOfficerListResponse_t_array(lua_State* L, int index, ClanOfficerListResponse_t *s, int size);
static FriendRichPresenceUpdate_t check_FriendRichPresenceUpdate_t(lua_State* L, int index);
static void check_FriendRichPresenceUpdate_t_array(lua_State* L, int index, FriendRichPresenceUpdate_t *s, int size);
static GameRichPresenceJoinRequested_t check_GameRichPresenceJoinRequested_t(lua_State* L, int index);
static void check_GameRichPresenceJoinRequested_t_array(lua_State* L, int index, GameRichPresenceJoinRequested_t *s, int size);
static GameConnectedClanChatMsg_t check_GameConnectedClanChatMsg_t(lua_State* L, int index);
static void check_GameConnectedClanChatMsg_t_array(lua_State* L, int index, GameConnectedClanChatMsg_t *s, int size);
static GameConnectedChatJoin_t check_GameConnectedChatJoin_t(lua_State* L, int index);
static void check_GameConnectedChatJoin_t_array(lua_State* L, int index, GameConnectedChatJoin_t *s, int size);
static GameConnectedChatLeave_t check_GameConnectedChatLeave_t(lua_State* L, int index);
static void check_GameConnectedChatLeave_t_array(lua_State* L, int index, GameConnectedChatLeave_t *s, int size);
static DownloadClanActivityCountsResult_t check_DownloadClanActivityCountsResult_t(lua_State* L, int index);
static void check_DownloadClanActivityCountsResult_t_array(lua_State* L, int index, DownloadClanActivityCountsResult_t *s, int size);
static JoinClanChatRoomCompletionResult_t check_JoinClanChatRoomCompletionResult_t(lua_State* L, int index);
static void check_JoinClanChatRoomCompletionResult_t_array(lua_State* L, int index, JoinClanChatRoomCompletionResult_t *s, int size);
static GameConnectedFriendChatMsg_t check_GameConnectedFriendChatMsg_t(lua_State* L, int index);
static void check_GameConnectedFriendChatMsg_t_array(lua_State* L, int index, GameConnectedFriendChatMsg_t *s, int size);
static FriendsGetFollowerCount_t check_FriendsGetFollowerCount_t(lua_State* L, int index);
static void check_FriendsGetFollowerCount_t_array(lua_State* L, int index, FriendsGetFollowerCount_t *s, int size);
static FriendsIsFollowing_t check_FriendsIsFollowing_t(lua_State* L, int index);
static void check_FriendsIsFollowing_t_array(lua_State* L, int index, FriendsIsFollowing_t *s, int size);
static FriendsEnumerateFollowingList_t check_FriendsEnumerateFollowingList_t(lua_State* L, int index);
static void check_FriendsEnumerateFollowingList_t_array(lua_State* L, int index, FriendsEnumerateFollowingList_t *s, int size);
static SetPersonaNameResponse_t check_SetPersonaNameResponse_t(lua_State* L, int index);
static void check_SetPersonaNameResponse_t_array(lua_State* L, int index, SetPersonaNameResponse_t *s, int size);
static UnreadChatMessagesChanged_t check_UnreadChatMessagesChanged_t(lua_State* L, int index);
static void check_UnreadChatMessagesChanged_t_array(lua_State* L, int index, UnreadChatMessagesChanged_t *s, int size);
static OverlayBrowserProtocolNavigation_t check_OverlayBrowserProtocolNavigation_t(lua_State* L, int index);
static void check_OverlayBrowserProtocolNavigation_t_array(lua_State* L, int index, OverlayBrowserProtocolNavigation_t *s, int size);
static EquippedProfileItemsChanged_t check_EquippedProfileItemsChanged_t(lua_State* L, int index);
static void check_EquippedProfileItemsChanged_t_array(lua_State* L, int index, EquippedProfileItemsChanged_t *s, int size);
static EquippedProfileItems_t check_EquippedProfileItems_t(lua_State* L, int index);
static void check_EquippedProfileItems_t_array(lua_State* L, int index, EquippedProfileItems_t *s, int size);
static IPCountry_t check_IPCountry_t(lua_State* L, int index);
static void check_IPCountry_t_array(lua_State* L, int index, IPCountry_t *s, int size);
static LowBatteryPower_t check_LowBatteryPower_t(lua_State* L, int index);
static void check_LowBatteryPower_t_array(lua_State* L, int index, LowBatteryPower_t *s, int size);
static SteamAPICallCompleted_t check_SteamAPICallCompleted_t(lua_State* L, int index);
static void check_SteamAPICallCompleted_t_array(lua_State* L, int index, SteamAPICallCompleted_t *s, int size);
static SteamShutdown_t check_SteamShutdown_t(lua_State* L, int index);
static void check_SteamShutdown_t_array(lua_State* L, int index, SteamShutdown_t *s, int size);
static CheckFileSignature_t check_CheckFileSignature_t(lua_State* L, int index);
static void check_CheckFileSignature_t_array(lua_State* L, int index, CheckFileSignature_t *s, int size);
static GamepadTextInputDismissed_t check_GamepadTextInputDismissed_t(lua_State* L, int index);
static void check_GamepadTextInputDismissed_t_array(lua_State* L, int index, GamepadTextInputDismissed_t *s, int size);
static AppResumingFromSuspend_t check_AppResumingFromSuspend_t(lua_State* L, int index);
static void check_AppResumingFromSuspend_t_array(lua_State* L, int index, AppResumingFromSuspend_t *s, int size);
static FloatingGamepadTextInputDismissed_t check_FloatingGamepadTextInputDismissed_t(lua_State* L, int index);
static void check_FloatingGamepadTextInputDismissed_t_array(lua_State* L, int index, FloatingGamepadTextInputDismissed_t *s, int size);
static FavoritesListChanged_t check_FavoritesListChanged_t(lua_State* L, int index);
static void check_FavoritesListChanged_t_array(lua_State* L, int index, FavoritesListChanged_t *s, int size);
static LobbyInvite_t check_LobbyInvite_t(lua_State* L, int index);
static void check_LobbyInvite_t_array(lua_State* L, int index, LobbyInvite_t *s, int size);
static LobbyEnter_t check_LobbyEnter_t(lua_State* L, int index);
static void check_LobbyEnter_t_array(lua_State* L, int index, LobbyEnter_t *s, int size);
static LobbyDataUpdate_t check_LobbyDataUpdate_t(lua_State* L, int index);
static void check_LobbyDataUpdate_t_array(lua_State* L, int index, LobbyDataUpdate_t *s, int size);
static LobbyChatUpdate_t check_LobbyChatUpdate_t(lua_State* L, int index);
static void check_LobbyChatUpdate_t_array(lua_State* L, int index, LobbyChatUpdate_t *s, int size);
static LobbyChatMsg_t check_LobbyChatMsg_t(lua_State* L, int index);
static void check_LobbyChatMsg_t_array(lua_State* L, int index, LobbyChatMsg_t *s, int size);
static LobbyGameCreated_t check_LobbyGameCreated_t(lua_State* L, int index);
static void check_LobbyGameCreated_t_array(lua_State* L, int index, LobbyGameCreated_t *s, int size);
static LobbyMatchList_t check_LobbyMatchList_t(lua_State* L, int index);
static void check_LobbyMatchList_t_array(lua_State* L, int index, LobbyMatchList_t *s, int size);
static LobbyKicked_t check_LobbyKicked_t(lua_State* L, int index);
static void check_LobbyKicked_t_array(lua_State* L, int index, LobbyKicked_t *s, int size);
static LobbyCreated_t check_LobbyCreated_t(lua_State* L, int index);
static void check_LobbyCreated_t_array(lua_State* L, int index, LobbyCreated_t *s, int size);
static PSNGameBootInviteResult_t check_PSNGameBootInviteResult_t(lua_State* L, int index);
static void check_PSNGameBootInviteResult_t_array(lua_State* L, int index, PSNGameBootInviteResult_t *s, int size);
static FavoritesListAccountsUpdated_t check_FavoritesListAccountsUpdated_t(lua_State* L, int index);
static void check_FavoritesListAccountsUpdated_t_array(lua_State* L, int index, FavoritesListAccountsUpdated_t *s, int size);
static SearchForGameProgressCallback_t check_SearchForGameProgressCallback_t(lua_State* L, int index);
static void check_SearchForGameProgressCallback_t_array(lua_State* L, int index, SearchForGameProgressCallback_t *s, int size);
static SearchForGameResultCallback_t check_SearchForGameResultCallback_t(lua_State* L, int index);
static void check_SearchForGameResultCallback_t_array(lua_State* L, int index, SearchForGameResultCallback_t *s, int size);
static RequestPlayersForGameProgressCallback_t check_RequestPlayersForGameProgressCallback_t(lua_State* L, int index);
static void check_RequestPlayersForGameProgressCallback_t_array(lua_State* L, int index, RequestPlayersForGameProgressCallback_t *s, int size);
static RequestPlayersForGameResultCallback_t check_RequestPlayersForGameResultCallback_t(lua_State* L, int index);
static void check_RequestPlayersForGameResultCallback_t_array(lua_State* L, int index, RequestPlayersForGameResultCallback_t *s, int size);
static RequestPlayersForGameFinalResultCallback_t check_RequestPlayersForGameFinalResultCallback_t(lua_State* L, int index);
static void check_RequestPlayersForGameFinalResultCallback_t_array(lua_State* L, int index, RequestPlayersForGameFinalResultCallback_t *s, int size);
static SubmitPlayerResultResultCallback_t check_SubmitPlayerResultResultCallback_t(lua_State* L, int index);
static void check_SubmitPlayerResultResultCallback_t_array(lua_State* L, int index, SubmitPlayerResultResultCallback_t *s, int size);
static EndGameResultCallback_t check_EndGameResultCallback_t(lua_State* L, int index);
static void check_EndGameResultCallback_t_array(lua_State* L, int index, EndGameResultCallback_t *s, int size);
static JoinPartyCallback_t check_JoinPartyCallback_t(lua_State* L, int index);
static void check_JoinPartyCallback_t_array(lua_State* L, int index, JoinPartyCallback_t *s, int size);
static CreateBeaconCallback_t check_CreateBeaconCallback_t(lua_State* L, int index);
static void check_CreateBeaconCallback_t_array(lua_State* L, int index, CreateBeaconCallback_t *s, int size);
static ReservationNotificationCallback_t check_ReservationNotificationCallback_t(lua_State* L, int index);
static void check_ReservationNotificationCallback_t_array(lua_State* L, int index, ReservationNotificationCallback_t *s, int size);
static ChangeNumOpenSlotsCallback_t check_ChangeNumOpenSlotsCallback_t(lua_State* L, int index);
static void check_ChangeNumOpenSlotsCallback_t_array(lua_State* L, int index, ChangeNumOpenSlotsCallback_t *s, int size);
static AvailableBeaconLocationsUpdated_t check_AvailableBeaconLocationsUpdated_t(lua_State* L, int index);
static void check_AvailableBeaconLocationsUpdated_t_array(lua_State* L, int index, AvailableBeaconLocationsUpdated_t *s, int size);
static ActiveBeaconsUpdated_t check_ActiveBeaconsUpdated_t(lua_State* L, int index);
static void check_ActiveBeaconsUpdated_t_array(lua_State* L, int index, ActiveBeaconsUpdated_t *s, int size);
static RemoteStorageFileShareResult_t check_RemoteStorageFileShareResult_t(lua_State* L, int index);
static void check_RemoteStorageFileShareResult_t_array(lua_State* L, int index, RemoteStorageFileShareResult_t *s, int size);
static RemoteStoragePublishFileResult_t check_RemoteStoragePublishFileResult_t(lua_State* L, int index);
static void check_RemoteStoragePublishFileResult_t_array(lua_State* L, int index, RemoteStoragePublishFileResult_t *s, int size);
static RemoteStorageDeletePublishedFileResult_t check_RemoteStorageDeletePublishedFileResult_t(lua_State* L, int index);
static void check_RemoteStorageDeletePublishedFileResult_t_array(lua_State* L, int index, RemoteStorageDeletePublishedFileResult_t *s, int size);
static RemoteStorageEnumerateUserPublishedFilesResult_t check_RemoteStorageEnumerateUserPublishedFilesResult_t(lua_State* L, int index);
static void check_RemoteStorageEnumerateUserPublishedFilesResult_t_array(lua_State* L, int index, RemoteStorageEnumerateUserPublishedFilesResult_t *s, int size);
static RemoteStorageSubscribePublishedFileResult_t check_RemoteStorageSubscribePublishedFileResult_t(lua_State* L, int index);
static void check_RemoteStorageSubscribePublishedFileResult_t_array(lua_State* L, int index, RemoteStorageSubscribePublishedFileResult_t *s, int size);
static RemoteStorageEnumerateUserSubscribedFilesResult_t check_RemoteStorageEnumerateUserSubscribedFilesResult_t(lua_State* L, int index);
static void check_RemoteStorageEnumerateUserSubscribedFilesResult_t_array(lua_State* L, int index, RemoteStorageEnumerateUserSubscribedFilesResult_t *s, int size);
static RemoteStorageUnsubscribePublishedFileResult_t check_RemoteStorageUnsubscribePublishedFileResult_t(lua_State* L, int index);
static void check_RemoteStorageUnsubscribePublishedFileResult_t_array(lua_State* L, int index, RemoteStorageUnsubscribePublishedFileResult_t *s, int size);
static RemoteStorageUpdatePublishedFileResult_t check_RemoteStorageUpdatePublishedFileResult_t(lua_State* L, int index);
static void check_RemoteStorageUpdatePublishedFileResult_t_array(lua_State* L, int index, RemoteStorageUpdatePublishedFileResult_t *s, int size);
static RemoteStorageDownloadUGCResult_t check_RemoteStorageDownloadUGCResult_t(lua_State* L, int index);
static void check_RemoteStorageDownloadUGCResult_t_array(lua_State* L, int index, RemoteStorageDownloadUGCResult_t *s, int size);
static RemoteStorageGetPublishedFileDetailsResult_t check_RemoteStorageGetPublishedFileDetailsResult_t(lua_State* L, int index);
static void check_RemoteStorageGetPublishedFileDetailsResult_t_array(lua_State* L, int index, RemoteStorageGetPublishedFileDetailsResult_t *s, int size);
static RemoteStorageEnumerateWorkshopFilesResult_t check_RemoteStorageEnumerateWorkshopFilesResult_t(lua_State* L, int index);
static void check_RemoteStorageEnumerateWorkshopFilesResult_t_array(lua_State* L, int index, RemoteStorageEnumerateWorkshopFilesResult_t *s, int size);
static RemoteStorageGetPublishedItemVoteDetailsResult_t check_RemoteStorageGetPublishedItemVoteDetailsResult_t(lua_State* L, int index);
static void check_RemoteStorageGetPublishedItemVoteDetailsResult_t_array(lua_State* L, int index, RemoteStorageGetPublishedItemVoteDetailsResult_t *s, int size);
static RemoteStoragePublishedFileSubscribed_t check_RemoteStoragePublishedFileSubscribed_t(lua_State* L, int index);
static void check_RemoteStoragePublishedFileSubscribed_t_array(lua_State* L, int index, RemoteStoragePublishedFileSubscribed_t *s, int size);
static RemoteStoragePublishedFileUnsubscribed_t check_RemoteStoragePublishedFileUnsubscribed_t(lua_State* L, int index);
static void check_RemoteStoragePublishedFileUnsubscribed_t_array(lua_State* L, int index, RemoteStoragePublishedFileUnsubscribed_t *s, int size);
static RemoteStoragePublishedFileDeleted_t check_RemoteStoragePublishedFileDeleted_t(lua_State* L, int index);
static void check_RemoteStoragePublishedFileDeleted_t_array(lua_State* L, int index, RemoteStoragePublishedFileDeleted_t *s, int size);
static RemoteStorageUpdateUserPublishedItemVoteResult_t check_RemoteStorageUpdateUserPublishedItemVoteResult_t(lua_State* L, int index);
static void check_RemoteStorageUpdateUserPublishedItemVoteResult_t_array(lua_State* L, int index, RemoteStorageUpdateUserPublishedItemVoteResult_t *s, int size);
static RemoteStorageUserVoteDetails_t check_RemoteStorageUserVoteDetails_t(lua_State* L, int index);
static void check_RemoteStorageUserVoteDetails_t_array(lua_State* L, int index, RemoteStorageUserVoteDetails_t *s, int size);
static RemoteStorageEnumerateUserSharedWorkshopFilesResult_t check_RemoteStorageEnumerateUserSharedWorkshopFilesResult_t(lua_State* L, int index);
static void check_RemoteStorageEnumerateUserSharedWorkshopFilesResult_t_array(lua_State* L, int index, RemoteStorageEnumerateUserSharedWorkshopFilesResult_t *s, int size);
static RemoteStorageSetUserPublishedFileActionResult_t check_RemoteStorageSetUserPublishedFileActionResult_t(lua_State* L, int index);
static void check_RemoteStorageSetUserPublishedFileActionResult_t_array(lua_State* L, int index, RemoteStorageSetUserPublishedFileActionResult_t *s, int size);
static RemoteStorageEnumeratePublishedFilesByUserActionResult_t check_RemoteStorageEnumeratePublishedFilesByUserActionResult_t(lua_State* L, int index);
static void check_RemoteStorageEnumeratePublishedFilesByUserActionResult_t_array(lua_State* L, int index, RemoteStorageEnumeratePublishedFilesByUserActionResult_t *s, int size);
static RemoteStoragePublishFileProgress_t check_RemoteStoragePublishFileProgress_t(lua_State* L, int index);
static void check_RemoteStoragePublishFileProgress_t_array(lua_State* L, int index, RemoteStoragePublishFileProgress_t *s, int size);
static RemoteStoragePublishedFileUpdated_t check_RemoteStoragePublishedFileUpdated_t(lua_State* L, int index);
static void check_RemoteStoragePublishedFileUpdated_t_array(lua_State* L, int index, RemoteStoragePublishedFileUpdated_t *s, int size);
static RemoteStorageFileWriteAsyncComplete_t check_RemoteStorageFileWriteAsyncComplete_t(lua_State* L, int index);
static void check_RemoteStorageFileWriteAsyncComplete_t_array(lua_State* L, int index, RemoteStorageFileWriteAsyncComplete_t *s, int size);
static RemoteStorageFileReadAsyncComplete_t check_RemoteStorageFileReadAsyncComplete_t(lua_State* L, int index);
static void check_RemoteStorageFileReadAsyncComplete_t_array(lua_State* L, int index, RemoteStorageFileReadAsyncComplete_t *s, int size);
static RemoteStorageLocalFileChange_t check_RemoteStorageLocalFileChange_t(lua_State* L, int index);
static void check_RemoteStorageLocalFileChange_t_array(lua_State* L, int index, RemoteStorageLocalFileChange_t *s, int size);
static UserStatsReceived_t check_UserStatsReceived_t(lua_State* L, int index);
static void check_UserStatsReceived_t_array(lua_State* L, int index, UserStatsReceived_t *s, int size);
static UserStatsStored_t check_UserStatsStored_t(lua_State* L, int index);
static void check_UserStatsStored_t_array(lua_State* L, int index, UserStatsStored_t *s, int size);
static UserAchievementStored_t check_UserAchievementStored_t(lua_State* L, int index);
static void check_UserAchievementStored_t_array(lua_State* L, int index, UserAchievementStored_t *s, int size);
static LeaderboardFindResult_t check_LeaderboardFindResult_t(lua_State* L, int index);
static void check_LeaderboardFindResult_t_array(lua_State* L, int index, LeaderboardFindResult_t *s, int size);
static LeaderboardScoresDownloaded_t check_LeaderboardScoresDownloaded_t(lua_State* L, int index);
static void check_LeaderboardScoresDownloaded_t_array(lua_State* L, int index, LeaderboardScoresDownloaded_t *s, int size);
static LeaderboardScoreUploaded_t check_LeaderboardScoreUploaded_t(lua_State* L, int index);
static void check_LeaderboardScoreUploaded_t_array(lua_State* L, int index, LeaderboardScoreUploaded_t *s, int size);
static NumberOfCurrentPlayers_t check_NumberOfCurrentPlayers_t(lua_State* L, int index);
static void check_NumberOfCurrentPlayers_t_array(lua_State* L, int index, NumberOfCurrentPlayers_t *s, int size);
static UserStatsUnloaded_t check_UserStatsUnloaded_t(lua_State* L, int index);
static void check_UserStatsUnloaded_t_array(lua_State* L, int index, UserStatsUnloaded_t *s, int size);
static UserAchievementIconFetched_t check_UserAchievementIconFetched_t(lua_State* L, int index);
static void check_UserAchievementIconFetched_t_array(lua_State* L, int index, UserAchievementIconFetched_t *s, int size);
static GlobalAchievementPercentagesReady_t check_GlobalAchievementPercentagesReady_t(lua_State* L, int index);
static void check_GlobalAchievementPercentagesReady_t_array(lua_State* L, int index, GlobalAchievementPercentagesReady_t *s, int size);
static LeaderboardUGCSet_t check_LeaderboardUGCSet_t(lua_State* L, int index);
static void check_LeaderboardUGCSet_t_array(lua_State* L, int index, LeaderboardUGCSet_t *s, int size);
static PS3TrophiesInstalled_t check_PS3TrophiesInstalled_t(lua_State* L, int index);
static void check_PS3TrophiesInstalled_t_array(lua_State* L, int index, PS3TrophiesInstalled_t *s, int size);
static GlobalStatsReceived_t check_GlobalStatsReceived_t(lua_State* L, int index);
static void check_GlobalStatsReceived_t_array(lua_State* L, int index, GlobalStatsReceived_t *s, int size);
static DlcInstalled_t check_DlcInstalled_t(lua_State* L, int index);
static void check_DlcInstalled_t_array(lua_State* L, int index, DlcInstalled_t *s, int size);
static RegisterActivationCodeResponse_t check_RegisterActivationCodeResponse_t(lua_State* L, int index);
static void check_RegisterActivationCodeResponse_t_array(lua_State* L, int index, RegisterActivationCodeResponse_t *s, int size);
static NewUrlLaunchParameters_t check_NewUrlLaunchParameters_t(lua_State* L, int index);
static void check_NewUrlLaunchParameters_t_array(lua_State* L, int index, NewUrlLaunchParameters_t *s, int size);
static AppProofOfPurchaseKeyResponse_t check_AppProofOfPurchaseKeyResponse_t(lua_State* L, int index);
static void check_AppProofOfPurchaseKeyResponse_t_array(lua_State* L, int index, AppProofOfPurchaseKeyResponse_t *s, int size);
static FileDetailsResult_t check_FileDetailsResult_t(lua_State* L, int index);
static void check_FileDetailsResult_t_array(lua_State* L, int index, FileDetailsResult_t *s, int size);
static TimedTrialStatus_t check_TimedTrialStatus_t(lua_State* L, int index);
static void check_TimedTrialStatus_t_array(lua_State* L, int index, TimedTrialStatus_t *s, int size);
static P2PSessionRequest_t check_P2PSessionRequest_t(lua_State* L, int index);
static void check_P2PSessionRequest_t_array(lua_State* L, int index, P2PSessionRequest_t *s, int size);
static P2PSessionConnectFail_t check_P2PSessionConnectFail_t(lua_State* L, int index);
static void check_P2PSessionConnectFail_t_array(lua_State* L, int index, P2PSessionConnectFail_t *s, int size);
static SocketStatusCallback_t check_SocketStatusCallback_t(lua_State* L, int index);
static void check_SocketStatusCallback_t_array(lua_State* L, int index, SocketStatusCallback_t *s, int size);
static ScreenshotReady_t check_ScreenshotReady_t(lua_State* L, int index);
static void check_ScreenshotReady_t_array(lua_State* L, int index, ScreenshotReady_t *s, int size);
static ScreenshotRequested_t check_ScreenshotRequested_t(lua_State* L, int index);
static void check_ScreenshotRequested_t_array(lua_State* L, int index, ScreenshotRequested_t *s, int size);
static PlaybackStatusHasChanged_t check_PlaybackStatusHasChanged_t(lua_State* L, int index);
static void check_PlaybackStatusHasChanged_t_array(lua_State* L, int index, PlaybackStatusHasChanged_t *s, int size);
static VolumeHasChanged_t check_VolumeHasChanged_t(lua_State* L, int index);
static void check_VolumeHasChanged_t_array(lua_State* L, int index, VolumeHasChanged_t *s, int size);
static MusicPlayerRemoteWillActivate_t check_MusicPlayerRemoteWillActivate_t(lua_State* L, int index);
static void check_MusicPlayerRemoteWillActivate_t_array(lua_State* L, int index, MusicPlayerRemoteWillActivate_t *s, int size);
static MusicPlayerRemoteWillDeactivate_t check_MusicPlayerRemoteWillDeactivate_t(lua_State* L, int index);
static void check_MusicPlayerRemoteWillDeactivate_t_array(lua_State* L, int index, MusicPlayerRemoteWillDeactivate_t *s, int size);
static MusicPlayerRemoteToFront_t check_MusicPlayerRemoteToFront_t(lua_State* L, int index);
static void check_MusicPlayerRemoteToFront_t_array(lua_State* L, int index, MusicPlayerRemoteToFront_t *s, int size);
static MusicPlayerWillQuit_t check_MusicPlayerWillQuit_t(lua_State* L, int index);
static void check_MusicPlayerWillQuit_t_array(lua_State* L, int index, MusicPlayerWillQuit_t *s, int size);
static MusicPlayerWantsPlay_t check_MusicPlayerWantsPlay_t(lua_State* L, int index);
static void check_MusicPlayerWantsPlay_t_array(lua_State* L, int index, MusicPlayerWantsPlay_t *s, int size);
static MusicPlayerWantsPause_t check_MusicPlayerWantsPause_t(lua_State* L, int index);
static void check_MusicPlayerWantsPause_t_array(lua_State* L, int index, MusicPlayerWantsPause_t *s, int size);
static MusicPlayerWantsPlayPrevious_t check_MusicPlayerWantsPlayPrevious_t(lua_State* L, int index);
static void check_MusicPlayerWantsPlayPrevious_t_array(lua_State* L, int index, MusicPlayerWantsPlayPrevious_t *s, int size);
static MusicPlayerWantsPlayNext_t check_MusicPlayerWantsPlayNext_t(lua_State* L, int index);
static void check_MusicPlayerWantsPlayNext_t_array(lua_State* L, int index, MusicPlayerWantsPlayNext_t *s, int size);
static MusicPlayerWantsShuffled_t check_MusicPlayerWantsShuffled_t(lua_State* L, int index);
static void check_MusicPlayerWantsShuffled_t_array(lua_State* L, int index, MusicPlayerWantsShuffled_t *s, int size);
static MusicPlayerWantsLooped_t check_MusicPlayerWantsLooped_t(lua_State* L, int index);
static void check_MusicPlayerWantsLooped_t_array(lua_State* L, int index, MusicPlayerWantsLooped_t *s, int size);
static MusicPlayerWantsVolume_t check_MusicPlayerWantsVolume_t(lua_State* L, int index);
static void check_MusicPlayerWantsVolume_t_array(lua_State* L, int index, MusicPlayerWantsVolume_t *s, int size);
static MusicPlayerSelectsQueueEntry_t check_MusicPlayerSelectsQueueEntry_t(lua_State* L, int index);
static void check_MusicPlayerSelectsQueueEntry_t_array(lua_State* L, int index, MusicPlayerSelectsQueueEntry_t *s, int size);
static MusicPlayerSelectsPlaylistEntry_t check_MusicPlayerSelectsPlaylistEntry_t(lua_State* L, int index);
static void check_MusicPlayerSelectsPlaylistEntry_t_array(lua_State* L, int index, MusicPlayerSelectsPlaylistEntry_t *s, int size);
static MusicPlayerWantsPlayingRepeatStatus_t check_MusicPlayerWantsPlayingRepeatStatus_t(lua_State* L, int index);
static void check_MusicPlayerWantsPlayingRepeatStatus_t_array(lua_State* L, int index, MusicPlayerWantsPlayingRepeatStatus_t *s, int size);
static HTTPRequestCompleted_t check_HTTPRequestCompleted_t(lua_State* L, int index);
static void check_HTTPRequestCompleted_t_array(lua_State* L, int index, HTTPRequestCompleted_t *s, int size);
static HTTPRequestHeadersReceived_t check_HTTPRequestHeadersReceived_t(lua_State* L, int index);
static void check_HTTPRequestHeadersReceived_t_array(lua_State* L, int index, HTTPRequestHeadersReceived_t *s, int size);
static HTTPRequestDataReceived_t check_HTTPRequestDataReceived_t(lua_State* L, int index);
static void check_HTTPRequestDataReceived_t_array(lua_State* L, int index, HTTPRequestDataReceived_t *s, int size);
static SteamInputDeviceConnected_t check_SteamInputDeviceConnected_t(lua_State* L, int index);
static void check_SteamInputDeviceConnected_t_array(lua_State* L, int index, SteamInputDeviceConnected_t *s, int size);
static SteamInputDeviceDisconnected_t check_SteamInputDeviceDisconnected_t(lua_State* L, int index);
static void check_SteamInputDeviceDisconnected_t_array(lua_State* L, int index, SteamInputDeviceDisconnected_t *s, int size);
static SteamInputConfigurationLoaded_t check_SteamInputConfigurationLoaded_t(lua_State* L, int index);
static void check_SteamInputConfigurationLoaded_t_array(lua_State* L, int index, SteamInputConfigurationLoaded_t *s, int size);
static SteamUGCQueryCompleted_t check_SteamUGCQueryCompleted_t(lua_State* L, int index);
static void check_SteamUGCQueryCompleted_t_array(lua_State* L, int index, SteamUGCQueryCompleted_t *s, int size);
static SteamUGCRequestUGCDetailsResult_t check_SteamUGCRequestUGCDetailsResult_t(lua_State* L, int index);
static void check_SteamUGCRequestUGCDetailsResult_t_array(lua_State* L, int index, SteamUGCRequestUGCDetailsResult_t *s, int size);
static CreateItemResult_t check_CreateItemResult_t(lua_State* L, int index);
static void check_CreateItemResult_t_array(lua_State* L, int index, CreateItemResult_t *s, int size);
static SubmitItemUpdateResult_t check_SubmitItemUpdateResult_t(lua_State* L, int index);
static void check_SubmitItemUpdateResult_t_array(lua_State* L, int index, SubmitItemUpdateResult_t *s, int size);
static ItemInstalled_t check_ItemInstalled_t(lua_State* L, int index);
static void check_ItemInstalled_t_array(lua_State* L, int index, ItemInstalled_t *s, int size);
static DownloadItemResult_t check_DownloadItemResult_t(lua_State* L, int index);
static void check_DownloadItemResult_t_array(lua_State* L, int index, DownloadItemResult_t *s, int size);
static UserFavoriteItemsListChanged_t check_UserFavoriteItemsListChanged_t(lua_State* L, int index);
static void check_UserFavoriteItemsListChanged_t_array(lua_State* L, int index, UserFavoriteItemsListChanged_t *s, int size);
static SetUserItemVoteResult_t check_SetUserItemVoteResult_t(lua_State* L, int index);
static void check_SetUserItemVoteResult_t_array(lua_State* L, int index, SetUserItemVoteResult_t *s, int size);
static GetUserItemVoteResult_t check_GetUserItemVoteResult_t(lua_State* L, int index);
static void check_GetUserItemVoteResult_t_array(lua_State* L, int index, GetUserItemVoteResult_t *s, int size);
static StartPlaytimeTrackingResult_t check_StartPlaytimeTrackingResult_t(lua_State* L, int index);
static void check_StartPlaytimeTrackingResult_t_array(lua_State* L, int index, StartPlaytimeTrackingResult_t *s, int size);
static StopPlaytimeTrackingResult_t check_StopPlaytimeTrackingResult_t(lua_State* L, int index);
static void check_StopPlaytimeTrackingResult_t_array(lua_State* L, int index, StopPlaytimeTrackingResult_t *s, int size);
static AddUGCDependencyResult_t check_AddUGCDependencyResult_t(lua_State* L, int index);
static void check_AddUGCDependencyResult_t_array(lua_State* L, int index, AddUGCDependencyResult_t *s, int size);
static RemoveUGCDependencyResult_t check_RemoveUGCDependencyResult_t(lua_State* L, int index);
static void check_RemoveUGCDependencyResult_t_array(lua_State* L, int index, RemoveUGCDependencyResult_t *s, int size);
static AddAppDependencyResult_t check_AddAppDependencyResult_t(lua_State* L, int index);
static void check_AddAppDependencyResult_t_array(lua_State* L, int index, AddAppDependencyResult_t *s, int size);
static RemoveAppDependencyResult_t check_RemoveAppDependencyResult_t(lua_State* L, int index);
static void check_RemoveAppDependencyResult_t_array(lua_State* L, int index, RemoveAppDependencyResult_t *s, int size);
static GetAppDependenciesResult_t check_GetAppDependenciesResult_t(lua_State* L, int index);
static void check_GetAppDependenciesResult_t_array(lua_State* L, int index, GetAppDependenciesResult_t *s, int size);
static DeleteItemResult_t check_DeleteItemResult_t(lua_State* L, int index);
static void check_DeleteItemResult_t_array(lua_State* L, int index, DeleteItemResult_t *s, int size);
static UserSubscribedItemsListChanged_t check_UserSubscribedItemsListChanged_t(lua_State* L, int index);
static void check_UserSubscribedItemsListChanged_t_array(lua_State* L, int index, UserSubscribedItemsListChanged_t *s, int size);
static WorkshopEULAStatus_t check_WorkshopEULAStatus_t(lua_State* L, int index);
static void check_WorkshopEULAStatus_t_array(lua_State* L, int index, WorkshopEULAStatus_t *s, int size);
static SteamAppInstalled_t check_SteamAppInstalled_t(lua_State* L, int index);
static void check_SteamAppInstalled_t_array(lua_State* L, int index, SteamAppInstalled_t *s, int size);
static SteamAppUninstalled_t check_SteamAppUninstalled_t(lua_State* L, int index);
static void check_SteamAppUninstalled_t_array(lua_State* L, int index, SteamAppUninstalled_t *s, int size);
static HTML_BrowserReady_t check_HTML_BrowserReady_t(lua_State* L, int index);
static void check_HTML_BrowserReady_t_array(lua_State* L, int index, HTML_BrowserReady_t *s, int size);
static HTML_NeedsPaint_t check_HTML_NeedsPaint_t(lua_State* L, int index);
static void check_HTML_NeedsPaint_t_array(lua_State* L, int index, HTML_NeedsPaint_t *s, int size);
static HTML_StartRequest_t check_HTML_StartRequest_t(lua_State* L, int index);
static void check_HTML_StartRequest_t_array(lua_State* L, int index, HTML_StartRequest_t *s, int size);
static HTML_CloseBrowser_t check_HTML_CloseBrowser_t(lua_State* L, int index);
static void check_HTML_CloseBrowser_t_array(lua_State* L, int index, HTML_CloseBrowser_t *s, int size);
static HTML_URLChanged_t check_HTML_URLChanged_t(lua_State* L, int index);
static void check_HTML_URLChanged_t_array(lua_State* L, int index, HTML_URLChanged_t *s, int size);
static HTML_FinishedRequest_t check_HTML_FinishedRequest_t(lua_State* L, int index);
static void check_HTML_FinishedRequest_t_array(lua_State* L, int index, HTML_FinishedRequest_t *s, int size);
static HTML_OpenLinkInNewTab_t check_HTML_OpenLinkInNewTab_t(lua_State* L, int index);
static void check_HTML_OpenLinkInNewTab_t_array(lua_State* L, int index, HTML_OpenLinkInNewTab_t *s, int size);
static HTML_ChangedTitle_t check_HTML_ChangedTitle_t(lua_State* L, int index);
static void check_HTML_ChangedTitle_t_array(lua_State* L, int index, HTML_ChangedTitle_t *s, int size);
static HTML_SearchResults_t check_HTML_SearchResults_t(lua_State* L, int index);
static void check_HTML_SearchResults_t_array(lua_State* L, int index, HTML_SearchResults_t *s, int size);
static HTML_CanGoBackAndForward_t check_HTML_CanGoBackAndForward_t(lua_State* L, int index);
static void check_HTML_CanGoBackAndForward_t_array(lua_State* L, int index, HTML_CanGoBackAndForward_t *s, int size);
static HTML_HorizontalScroll_t check_HTML_HorizontalScroll_t(lua_State* L, int index);
static void check_HTML_HorizontalScroll_t_array(lua_State* L, int index, HTML_HorizontalScroll_t *s, int size);
static HTML_VerticalScroll_t check_HTML_VerticalScroll_t(lua_State* L, int index);
static void check_HTML_VerticalScroll_t_array(lua_State* L, int index, HTML_VerticalScroll_t *s, int size);
static HTML_LinkAtPosition_t check_HTML_LinkAtPosition_t(lua_State* L, int index);
static void check_HTML_LinkAtPosition_t_array(lua_State* L, int index, HTML_LinkAtPosition_t *s, int size);
static HTML_JSAlert_t check_HTML_JSAlert_t(lua_State* L, int index);
static void check_HTML_JSAlert_t_array(lua_State* L, int index, HTML_JSAlert_t *s, int size);
static HTML_JSConfirm_t check_HTML_JSConfirm_t(lua_State* L, int index);
static void check_HTML_JSConfirm_t_array(lua_State* L, int index, HTML_JSConfirm_t *s, int size);
static HTML_FileOpenDialog_t check_HTML_FileOpenDialog_t(lua_State* L, int index);
static void check_HTML_FileOpenDialog_t_array(lua_State* L, int index, HTML_FileOpenDialog_t *s, int size);
static HTML_NewWindow_t check_HTML_NewWindow_t(lua_State* L, int index);
static void check_HTML_NewWindow_t_array(lua_State* L, int index, HTML_NewWindow_t *s, int size);
static HTML_SetCursor_t check_HTML_SetCursor_t(lua_State* L, int index);
static void check_HTML_SetCursor_t_array(lua_State* L, int index, HTML_SetCursor_t *s, int size);
static HTML_StatusText_t check_HTML_StatusText_t(lua_State* L, int index);
static void check_HTML_StatusText_t_array(lua_State* L, int index, HTML_StatusText_t *s, int size);
static HTML_ShowToolTip_t check_HTML_ShowToolTip_t(lua_State* L, int index);
static void check_HTML_ShowToolTip_t_array(lua_State* L, int index, HTML_ShowToolTip_t *s, int size);
static HTML_UpdateToolTip_t check_HTML_UpdateToolTip_t(lua_State* L, int index);
static void check_HTML_UpdateToolTip_t_array(lua_State* L, int index, HTML_UpdateToolTip_t *s, int size);
static HTML_HideToolTip_t check_HTML_HideToolTip_t(lua_State* L, int index);
static void check_HTML_HideToolTip_t_array(lua_State* L, int index, HTML_HideToolTip_t *s, int size);
static HTML_BrowserRestarted_t check_HTML_BrowserRestarted_t(lua_State* L, int index);
static void check_HTML_BrowserRestarted_t_array(lua_State* L, int index, HTML_BrowserRestarted_t *s, int size);
static SteamInventoryResultReady_t check_SteamInventoryResultReady_t(lua_State* L, int index);
static void check_SteamInventoryResultReady_t_array(lua_State* L, int index, SteamInventoryResultReady_t *s, int size);
static SteamInventoryFullUpdate_t check_SteamInventoryFullUpdate_t(lua_State* L, int index);
static void check_SteamInventoryFullUpdate_t_array(lua_State* L, int index, SteamInventoryFullUpdate_t *s, int size);
static SteamInventoryDefinitionUpdate_t check_SteamInventoryDefinitionUpdate_t(lua_State* L, int index);
static void check_SteamInventoryDefinitionUpdate_t_array(lua_State* L, int index, SteamInventoryDefinitionUpdate_t *s, int size);
static SteamInventoryEligiblePromoItemDefIDs_t check_SteamInventoryEligiblePromoItemDefIDs_t(lua_State* L, int index);
static void check_SteamInventoryEligiblePromoItemDefIDs_t_array(lua_State* L, int index, SteamInventoryEligiblePromoItemDefIDs_t *s, int size);
static SteamInventoryStartPurchaseResult_t check_SteamInventoryStartPurchaseResult_t(lua_State* L, int index);
static void check_SteamInventoryStartPurchaseResult_t_array(lua_State* L, int index, SteamInventoryStartPurchaseResult_t *s, int size);
static SteamInventoryRequestPricesResult_t check_SteamInventoryRequestPricesResult_t(lua_State* L, int index);
static void check_SteamInventoryRequestPricesResult_t_array(lua_State* L, int index, SteamInventoryRequestPricesResult_t *s, int size);
static GetVideoURLResult_t check_GetVideoURLResult_t(lua_State* L, int index);
static void check_GetVideoURLResult_t_array(lua_State* L, int index, GetVideoURLResult_t *s, int size);
static GetOPFSettingsResult_t check_GetOPFSettingsResult_t(lua_State* L, int index);
static void check_GetOPFSettingsResult_t_array(lua_State* L, int index, GetOPFSettingsResult_t *s, int size);
static SteamParentalSettingsChanged_t check_SteamParentalSettingsChanged_t(lua_State* L, int index);
static void check_SteamParentalSettingsChanged_t_array(lua_State* L, int index, SteamParentalSettingsChanged_t *s, int size);
static SteamRemotePlaySessionConnected_t check_SteamRemotePlaySessionConnected_t(lua_State* L, int index);
static void check_SteamRemotePlaySessionConnected_t_array(lua_State* L, int index, SteamRemotePlaySessionConnected_t *s, int size);
static SteamRemotePlaySessionDisconnected_t check_SteamRemotePlaySessionDisconnected_t(lua_State* L, int index);
static void check_SteamRemotePlaySessionDisconnected_t_array(lua_State* L, int index, SteamRemotePlaySessionDisconnected_t *s, int size);
static SteamNetworkingMessagesSessionRequest_t check_SteamNetworkingMessagesSessionRequest_t(lua_State* L, int index);
static void check_SteamNetworkingMessagesSessionRequest_t_array(lua_State* L, int index, SteamNetworkingMessagesSessionRequest_t *s, int size);
static SteamNetworkingMessagesSessionFailed_t check_SteamNetworkingMessagesSessionFailed_t(lua_State* L, int index);
static void check_SteamNetworkingMessagesSessionFailed_t_array(lua_State* L, int index, SteamNetworkingMessagesSessionFailed_t *s, int size);
static SteamNetConnectionStatusChangedCallback_t check_SteamNetConnectionStatusChangedCallback_t(lua_State* L, int index);
static void check_SteamNetConnectionStatusChangedCallback_t_array(lua_State* L, int index, SteamNetConnectionStatusChangedCallback_t *s, int size);
static SteamNetAuthenticationStatus_t check_SteamNetAuthenticationStatus_t(lua_State* L, int index);
static void check_SteamNetAuthenticationStatus_t_array(lua_State* L, int index, SteamNetAuthenticationStatus_t *s, int size);
static SteamRelayNetworkStatus_t check_SteamRelayNetworkStatus_t(lua_State* L, int index);
static void check_SteamRelayNetworkStatus_t_array(lua_State* L, int index, SteamRelayNetworkStatus_t *s, int size);
static GSClientApprove_t check_GSClientApprove_t(lua_State* L, int index);
static void check_GSClientApprove_t_array(lua_State* L, int index, GSClientApprove_t *s, int size);
static GSClientDeny_t check_GSClientDeny_t(lua_State* L, int index);
static void check_GSClientDeny_t_array(lua_State* L, int index, GSClientDeny_t *s, int size);
static GSClientKick_t check_GSClientKick_t(lua_State* L, int index);
static void check_GSClientKick_t_array(lua_State* L, int index, GSClientKick_t *s, int size);
static GSClientAchievementStatus_t check_GSClientAchievementStatus_t(lua_State* L, int index);
static void check_GSClientAchievementStatus_t_array(lua_State* L, int index, GSClientAchievementStatus_t *s, int size);
static GSPolicyResponse_t check_GSPolicyResponse_t(lua_State* L, int index);
static void check_GSPolicyResponse_t_array(lua_State* L, int index, GSPolicyResponse_t *s, int size);
static GSGameplayStats_t check_GSGameplayStats_t(lua_State* L, int index);
static void check_GSGameplayStats_t_array(lua_State* L, int index, GSGameplayStats_t *s, int size);
static GSClientGroupStatus_t check_GSClientGroupStatus_t(lua_State* L, int index);
static void check_GSClientGroupStatus_t_array(lua_State* L, int index, GSClientGroupStatus_t *s, int size);
static GSReputation_t check_GSReputation_t(lua_State* L, int index);
static void check_GSReputation_t_array(lua_State* L, int index, GSReputation_t *s, int size);
static AssociateWithClanResult_t check_AssociateWithClanResult_t(lua_State* L, int index);
static void check_AssociateWithClanResult_t_array(lua_State* L, int index, AssociateWithClanResult_t *s, int size);
static ComputeNewPlayerCompatibilityResult_t check_ComputeNewPlayerCompatibilityResult_t(lua_State* L, int index);
static void check_ComputeNewPlayerCompatibilityResult_t_array(lua_State* L, int index, ComputeNewPlayerCompatibilityResult_t *s, int size);
static GSStatsReceived_t check_GSStatsReceived_t(lua_State* L, int index);
static void check_GSStatsReceived_t_array(lua_State* L, int index, GSStatsReceived_t *s, int size);
static GSStatsStored_t check_GSStatsStored_t(lua_State* L, int index);
static void check_GSStatsStored_t_array(lua_State* L, int index, GSStatsStored_t *s, int size);
static GSStatsUnloaded_t check_GSStatsUnloaded_t(lua_State* L, int index);
static void check_GSStatsUnloaded_t_array(lua_State* L, int index, GSStatsUnloaded_t *s, int size);

static int ISteamUser_GetHSteamUser(lua_State* L);
static int ISteamUser_BLoggedOn(lua_State* L);
static int ISteamUser_GetSteamID(lua_State* L);
static int ISteamUser_TrackAppUsageEvent(lua_State* L);
static int ISteamUser_GetUserDataFolder(lua_State* L);
static int ISteamUser_GetAuthSessionTicket(lua_State* L);
static int ISteamUser_BeginAuthSession(lua_State* L);
static int ISteamUser_EndAuthSession(lua_State* L);
static int ISteamUser_CancelAuthTicket(lua_State* L);
static int ISteamUser_UserHasLicenseForApp(lua_State* L);
static int ISteamUser_BIsBehindNAT(lua_State* L);
static int ISteamUser_AdvertiseGame(lua_State* L);
static int ISteamUser_RequestEncryptedAppTicket(lua_State* L);
static int ISteamUser_GetEncryptedAppTicket(lua_State* L);
static int ISteamUser_GetGameBadgeLevel(lua_State* L);
static int ISteamUser_GetPlayerSteamLevel(lua_State* L);
static int ISteamUser_RequestStoreAuthURL(lua_State* L);
static int ISteamUser_BIsPhoneVerified(lua_State* L);
static int ISteamUser_BIsTwoFactorEnabled(lua_State* L);
static int ISteamUser_BIsPhoneIdentifying(lua_State* L);
static int ISteamUser_BIsPhoneRequiringVerification(lua_State* L);
static int ISteamUser_GetMarketEligibility(lua_State* L);
static int ISteamUser_GetDurationControl(lua_State* L);
static int ISteamUser_BSetDurationControlOnlineState(lua_State* L);
static int ISteamFriends_GetPersonaName(lua_State* L);
static int ISteamFriends_SetPersonaName(lua_State* L);
static int ISteamFriends_GetPersonaState(lua_State* L);
static int ISteamFriends_GetFriendCount(lua_State* L);
static int ISteamFriends_GetFriendByIndex(lua_State* L);
static int ISteamFriends_GetFriendRelationship(lua_State* L);
static int ISteamFriends_GetFriendPersonaState(lua_State* L);
static int ISteamFriends_GetFriendPersonaName(lua_State* L);
static int ISteamFriends_GetFriendGamePlayed(lua_State* L);
static int ISteamFriends_GetFriendPersonaNameHistory(lua_State* L);
static int ISteamFriends_GetFriendSteamLevel(lua_State* L);
static int ISteamFriends_GetPlayerNickname(lua_State* L);
static int ISteamFriends_GetFriendsGroupCount(lua_State* L);
static int ISteamFriends_GetFriendsGroupIDByIndex(lua_State* L);
static int ISteamFriends_GetFriendsGroupName(lua_State* L);
static int ISteamFriends_GetFriendsGroupMembersCount(lua_State* L);
static int ISteamFriends_GetFriendsGroupMembersList(lua_State* L);
static int ISteamFriends_HasFriend(lua_State* L);
static int ISteamFriends_GetClanCount(lua_State* L);
static int ISteamFriends_GetClanByIndex(lua_State* L);
static int ISteamFriends_GetClanName(lua_State* L);
static int ISteamFriends_GetClanTag(lua_State* L);
static int ISteamFriends_GetClanActivityCounts(lua_State* L);
static int ISteamFriends_DownloadClanActivityCounts(lua_State* L);
static int ISteamFriends_GetFriendCountFromSource(lua_State* L);
static int ISteamFriends_GetFriendFromSourceByIndex(lua_State* L);
static int ISteamFriends_IsUserInSource(lua_State* L);
static int ISteamFriends_SetInGameVoiceSpeaking(lua_State* L);
static int ISteamFriends_ActivateGameOverlay(lua_State* L);
static int ISteamFriends_ActivateGameOverlayToUser(lua_State* L);
static int ISteamFriends_ActivateGameOverlayToWebPage(lua_State* L);
static int ISteamFriends_ActivateGameOverlayToStore(lua_State* L);
static int ISteamFriends_SetPlayedWith(lua_State* L);
static int ISteamFriends_ActivateGameOverlayInviteDialog(lua_State* L);
static int ISteamFriends_GetSmallFriendAvatar(lua_State* L);
static int ISteamFriends_GetMediumFriendAvatar(lua_State* L);
static int ISteamFriends_GetLargeFriendAvatar(lua_State* L);
static int ISteamFriends_RequestUserInformation(lua_State* L);
static int ISteamFriends_RequestClanOfficerList(lua_State* L);
static int ISteamFriends_GetClanOwner(lua_State* L);
static int ISteamFriends_GetClanOfficerCount(lua_State* L);
static int ISteamFriends_GetClanOfficerByIndex(lua_State* L);
static int ISteamFriends_GetUserRestrictions(lua_State* L);
static int ISteamFriends_SetRichPresence(lua_State* L);
static int ISteamFriends_ClearRichPresence(lua_State* L);
static int ISteamFriends_GetFriendRichPresence(lua_State* L);
static int ISteamFriends_GetFriendRichPresenceKeyCount(lua_State* L);
static int ISteamFriends_GetFriendRichPresenceKeyByIndex(lua_State* L);
static int ISteamFriends_RequestFriendRichPresence(lua_State* L);
static int ISteamFriends_InviteUserToGame(lua_State* L);
static int ISteamFriends_GetCoplayFriendCount(lua_State* L);
static int ISteamFriends_GetCoplayFriend(lua_State* L);
static int ISteamFriends_GetFriendCoplayTime(lua_State* L);
static int ISteamFriends_GetFriendCoplayGame(lua_State* L);
static int ISteamFriends_JoinClanChatRoom(lua_State* L);
static int ISteamFriends_LeaveClanChatRoom(lua_State* L);
static int ISteamFriends_GetClanChatMemberCount(lua_State* L);
static int ISteamFriends_GetChatMemberByIndex(lua_State* L);
static int ISteamFriends_SendClanChatMessage(lua_State* L);
static int ISteamFriends_GetClanChatMessage(lua_State* L);
static int ISteamFriends_IsClanChatAdmin(lua_State* L);
static int ISteamFriends_IsClanChatWindowOpenInSteam(lua_State* L);
static int ISteamFriends_OpenClanChatWindowInSteam(lua_State* L);
static int ISteamFriends_CloseClanChatWindowInSteam(lua_State* L);
static int ISteamFriends_SetListenForFriendsMessages(lua_State* L);
static int ISteamFriends_ReplyToFriendMessage(lua_State* L);
static int ISteamFriends_GetFriendMessage(lua_State* L);
static int ISteamFriends_GetFollowerCount(lua_State* L);
static int ISteamFriends_IsFollowing(lua_State* L);
static int ISteamFriends_EnumerateFollowingList(lua_State* L);
static int ISteamFriends_IsClanPublic(lua_State* L);
static int ISteamFriends_IsClanOfficialGameGroup(lua_State* L);
static int ISteamFriends_GetNumChatsWithUnreadPriorityMessages(lua_State* L);
static int ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog(lua_State* L);
static int ISteamFriends_RegisterProtocolInOverlayBrowser(lua_State* L);
static int ISteamFriends_ActivateGameOverlayInviteDialogConnectString(lua_State* L);
static int ISteamFriends_RequestEquippedProfileItems(lua_State* L);
static int ISteamFriends_BHasEquippedProfileItem(lua_State* L);
static int ISteamFriends_GetProfileItemPropertyString(lua_State* L);
static int ISteamFriends_GetProfileItemPropertyUint(lua_State* L);
static int ISteamUtils_GetSecondsSinceAppActive(lua_State* L);
static int ISteamUtils_GetSecondsSinceComputerActive(lua_State* L);
static int ISteamUtils_GetConnectedUniverse(lua_State* L);
static int ISteamUtils_GetServerRealTime(lua_State* L);
static int ISteamUtils_GetIPCountry(lua_State* L);
static int ISteamUtils_GetImageSize(lua_State* L);
static int ISteamUtils_GetImageRGBA(lua_State* L);
static int ISteamUtils_GetCurrentBatteryPower(lua_State* L);
static int ISteamUtils_GetAppID(lua_State* L);
static int ISteamUtils_SetOverlayNotificationPosition(lua_State* L);
static int ISteamUtils_IsAPICallCompleted(lua_State* L);
static int ISteamUtils_GetAPICallFailureReason(lua_State* L);
static int ISteamUtils_GetAPICallResult(lua_State* L);
static int ISteamUtils_GetIPCCallCount(lua_State* L);
static int ISteamUtils_IsOverlayEnabled(lua_State* L);
static int ISteamUtils_BOverlayNeedsPresent(lua_State* L);
static int ISteamUtils_CheckFileSignature(lua_State* L);
static int ISteamUtils_ShowGamepadTextInput(lua_State* L);
static int ISteamUtils_GetEnteredGamepadTextLength(lua_State* L);
static int ISteamUtils_GetEnteredGamepadTextInput(lua_State* L);
static int ISteamUtils_GetSteamUILanguage(lua_State* L);
static int ISteamUtils_IsSteamRunningInVR(lua_State* L);
static int ISteamUtils_SetOverlayNotificationInset(lua_State* L);
static int ISteamUtils_IsSteamInBigPictureMode(lua_State* L);
static int ISteamUtils_StartVRDashboard(lua_State* L);
static int ISteamUtils_IsVRHeadsetStreamingEnabled(lua_State* L);
static int ISteamUtils_SetVRHeadsetStreamingEnabled(lua_State* L);
static int ISteamUtils_IsSteamChinaLauncher(lua_State* L);
static int ISteamUtils_InitFilterText(lua_State* L);
static int ISteamUtils_FilterText(lua_State* L);
static int ISteamUtils_GetIPv6ConnectivityState(lua_State* L);
static int ISteamUtils_IsSteamRunningOnSteamDeck(lua_State* L);
static int ISteamUtils_ShowFloatingGamepadTextInput(lua_State* L);
static int ISteamUtils_SetGameLauncherMode(lua_State* L);
static int ISteamUtils_DismissFloatingGamepadTextInput(lua_State* L);
static int ISteamMatchmaking_GetFavoriteGameCount(lua_State* L);
static int ISteamMatchmaking_GetFavoriteGame(lua_State* L);
static int ISteamMatchmaking_AddFavoriteGame(lua_State* L);
static int ISteamMatchmaking_RemoveFavoriteGame(lua_State* L);
static int ISteamMatchmaking_RequestLobbyList(lua_State* L);
static int ISteamMatchmaking_AddRequestLobbyListStringFilter(lua_State* L);
static int ISteamMatchmaking_AddRequestLobbyListNumericalFilter(lua_State* L);
static int ISteamMatchmaking_AddRequestLobbyListNearValueFilter(lua_State* L);
static int ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(lua_State* L);
static int ISteamMatchmaking_AddRequestLobbyListDistanceFilter(lua_State* L);
static int ISteamMatchmaking_AddRequestLobbyListResultCountFilter(lua_State* L);
static int ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(lua_State* L);
static int ISteamMatchmaking_GetLobbyByIndex(lua_State* L);
static int ISteamMatchmaking_CreateLobby(lua_State* L);
static int ISteamMatchmaking_JoinLobby(lua_State* L);
static int ISteamMatchmaking_LeaveLobby(lua_State* L);
static int ISteamMatchmaking_InviteUserToLobby(lua_State* L);
static int ISteamMatchmaking_GetNumLobbyMembers(lua_State* L);
static int ISteamMatchmaking_GetLobbyMemberByIndex(lua_State* L);
static int ISteamMatchmaking_GetLobbyData(lua_State* L);
static int ISteamMatchmaking_SetLobbyData(lua_State* L);
static int ISteamMatchmaking_GetLobbyDataCount(lua_State* L);
static int ISteamMatchmaking_GetLobbyDataByIndex(lua_State* L);
static int ISteamMatchmaking_DeleteLobbyData(lua_State* L);
static int ISteamMatchmaking_GetLobbyMemberData(lua_State* L);
static int ISteamMatchmaking_SetLobbyMemberData(lua_State* L);
static int ISteamMatchmaking_SendLobbyChatMsg(lua_State* L);
static int ISteamMatchmaking_GetLobbyChatEntry(lua_State* L);
static int ISteamMatchmaking_RequestLobbyData(lua_State* L);
static int ISteamMatchmaking_SetLobbyGameServer(lua_State* L);
static int ISteamMatchmaking_GetLobbyGameServer(lua_State* L);
static int ISteamMatchmaking_SetLobbyMemberLimit(lua_State* L);
static int ISteamMatchmaking_GetLobbyMemberLimit(lua_State* L);
static int ISteamMatchmaking_SetLobbyType(lua_State* L);
static int ISteamMatchmaking_SetLobbyJoinable(lua_State* L);
static int ISteamMatchmaking_GetLobbyOwner(lua_State* L);
static int ISteamMatchmaking_SetLobbyOwner(lua_State* L);
static int ISteamMatchmaking_SetLinkedLobby(lua_State* L);
static int ISteamGameSearch_AddGameSearchParams(lua_State* L);
static int ISteamGameSearch_SearchForGameWithLobby(lua_State* L);
static int ISteamGameSearch_SearchForGameSolo(lua_State* L);
static int ISteamGameSearch_AcceptGame(lua_State* L);
static int ISteamGameSearch_DeclineGame(lua_State* L);
static int ISteamGameSearch_RetrieveConnectionDetails(lua_State* L);
static int ISteamGameSearch_EndGameSearch(lua_State* L);
static int ISteamGameSearch_SetGameHostParams(lua_State* L);
static int ISteamGameSearch_SetConnectionDetails(lua_State* L);
static int ISteamGameSearch_RequestPlayersForGame(lua_State* L);
static int ISteamGameSearch_HostConfirmGameStart(lua_State* L);
static int ISteamGameSearch_CancelRequestPlayersForGame(lua_State* L);
static int ISteamGameSearch_SubmitPlayerResult(lua_State* L);
static int ISteamGameSearch_EndGame(lua_State* L);
static int ISteamParties_GetNumActiveBeacons(lua_State* L);
static int ISteamParties_GetBeaconByIndex(lua_State* L);
static int ISteamParties_GetBeaconDetails(lua_State* L);
static int ISteamParties_JoinParty(lua_State* L);
static int ISteamParties_GetNumAvailableBeaconLocations(lua_State* L);
static int ISteamParties_GetAvailableBeaconLocations(lua_State* L);
static int ISteamParties_CreateBeacon(lua_State* L);
static int ISteamParties_OnReservationCompleted(lua_State* L);
static int ISteamParties_CancelReservation(lua_State* L);
static int ISteamParties_ChangeNumOpenSlots(lua_State* L);
static int ISteamParties_DestroyBeacon(lua_State* L);
static int ISteamParties_GetBeaconLocationData(lua_State* L);
static int ISteamRemoteStorage_FileWrite(lua_State* L);
static int ISteamRemoteStorage_FileRead(lua_State* L);
static int ISteamRemoteStorage_FileWriteAsync(lua_State* L);
static int ISteamRemoteStorage_FileReadAsync(lua_State* L);
static int ISteamRemoteStorage_FileReadAsyncComplete(lua_State* L);
static int ISteamRemoteStorage_FileForget(lua_State* L);
static int ISteamRemoteStorage_FileDelete(lua_State* L);
static int ISteamRemoteStorage_FileShare(lua_State* L);
static int ISteamRemoteStorage_SetSyncPlatforms(lua_State* L);
static int ISteamRemoteStorage_FileWriteStreamOpen(lua_State* L);
static int ISteamRemoteStorage_FileWriteStreamWriteChunk(lua_State* L);
static int ISteamRemoteStorage_FileWriteStreamClose(lua_State* L);
static int ISteamRemoteStorage_FileWriteStreamCancel(lua_State* L);
static int ISteamRemoteStorage_FileExists(lua_State* L);
static int ISteamRemoteStorage_FilePersisted(lua_State* L);
static int ISteamRemoteStorage_GetFileSize(lua_State* L);
static int ISteamRemoteStorage_GetFileTimestamp(lua_State* L);
static int ISteamRemoteStorage_GetSyncPlatforms(lua_State* L);
static int ISteamRemoteStorage_GetFileCount(lua_State* L);
static int ISteamRemoteStorage_GetFileNameAndSize(lua_State* L);
static int ISteamRemoteStorage_GetQuota(lua_State* L);
static int ISteamRemoteStorage_IsCloudEnabledForAccount(lua_State* L);
static int ISteamRemoteStorage_IsCloudEnabledForApp(lua_State* L);
static int ISteamRemoteStorage_SetCloudEnabledForApp(lua_State* L);
static int ISteamRemoteStorage_UGCDownload(lua_State* L);
static int ISteamRemoteStorage_GetUGCDownloadProgress(lua_State* L);
static int ISteamRemoteStorage_GetUGCDetails(lua_State* L);
static int ISteamRemoteStorage_UGCRead(lua_State* L);
static int ISteamRemoteStorage_GetCachedUGCCount(lua_State* L);
static int ISteamRemoteStorage_GetCachedUGCHandle(lua_State* L);
static int ISteamRemoteStorage_PublishWorkshopFile(lua_State* L);
static int ISteamRemoteStorage_CreatePublishedFileUpdateRequest(lua_State* L);
static int ISteamRemoteStorage_UpdatePublishedFileFile(lua_State* L);
static int ISteamRemoteStorage_UpdatePublishedFilePreviewFile(lua_State* L);
static int ISteamRemoteStorage_UpdatePublishedFileTitle(lua_State* L);
static int ISteamRemoteStorage_UpdatePublishedFileDescription(lua_State* L);
static int ISteamRemoteStorage_UpdatePublishedFileVisibility(lua_State* L);
static int ISteamRemoteStorage_UpdatePublishedFileTags(lua_State* L);
static int ISteamRemoteStorage_CommitPublishedFileUpdate(lua_State* L);
static int ISteamRemoteStorage_GetPublishedFileDetails(lua_State* L);
static int ISteamRemoteStorage_DeletePublishedFile(lua_State* L);
static int ISteamRemoteStorage_EnumerateUserPublishedFiles(lua_State* L);
static int ISteamRemoteStorage_SubscribePublishedFile(lua_State* L);
static int ISteamRemoteStorage_EnumerateUserSubscribedFiles(lua_State* L);
static int ISteamRemoteStorage_UnsubscribePublishedFile(lua_State* L);
static int ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(lua_State* L);
static int ISteamRemoteStorage_GetPublishedItemVoteDetails(lua_State* L);
static int ISteamRemoteStorage_UpdateUserPublishedItemVote(lua_State* L);
static int ISteamRemoteStorage_GetUserPublishedItemVoteDetails(lua_State* L);
static int ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(lua_State* L);
static int ISteamRemoteStorage_PublishVideo(lua_State* L);
static int ISteamRemoteStorage_SetUserPublishedFileAction(lua_State* L);
static int ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(lua_State* L);
static int ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(lua_State* L);
static int ISteamRemoteStorage_UGCDownloadToLocation(lua_State* L);
static int ISteamRemoteStorage_GetLocalFileChangeCount(lua_State* L);
static int ISteamRemoteStorage_GetLocalFileChange(lua_State* L);
static int ISteamRemoteStorage_BeginFileWriteBatch(lua_State* L);
static int ISteamRemoteStorage_EndFileWriteBatch(lua_State* L);
static int ISteamUserStats_RequestCurrentStats(lua_State* L);
static int ISteamUserStats_GetStatInt32(lua_State* L);
static int ISteamUserStats_GetStatFloat(lua_State* L);
static int ISteamUserStats_SetStatInt32(lua_State* L);
static int ISteamUserStats_SetStatFloat(lua_State* L);
static int ISteamUserStats_UpdateAvgRateStat(lua_State* L);
static int ISteamUserStats_GetAchievement(lua_State* L);
static int ISteamUserStats_SetAchievement(lua_State* L);
static int ISteamUserStats_ClearAchievement(lua_State* L);
static int ISteamUserStats_GetAchievementAndUnlockTime(lua_State* L);
static int ISteamUserStats_StoreStats(lua_State* L);
static int ISteamUserStats_GetAchievementIcon(lua_State* L);
static int ISteamUserStats_GetAchievementDisplayAttribute(lua_State* L);
static int ISteamUserStats_IndicateAchievementProgress(lua_State* L);
static int ISteamUserStats_GetNumAchievements(lua_State* L);
static int ISteamUserStats_GetAchievementName(lua_State* L);
static int ISteamUserStats_RequestUserStats(lua_State* L);
static int ISteamUserStats_GetUserStatInt32(lua_State* L);
static int ISteamUserStats_GetUserStatFloat(lua_State* L);
static int ISteamUserStats_GetUserAchievement(lua_State* L);
static int ISteamUserStats_GetUserAchievementAndUnlockTime(lua_State* L);
static int ISteamUserStats_ResetAllStats(lua_State* L);
static int ISteamUserStats_FindOrCreateLeaderboard(lua_State* L);
static int ISteamUserStats_FindLeaderboard(lua_State* L);
static int ISteamUserStats_GetLeaderboardName(lua_State* L);
static int ISteamUserStats_GetLeaderboardEntryCount(lua_State* L);
static int ISteamUserStats_GetLeaderboardSortMethod(lua_State* L);
static int ISteamUserStats_GetLeaderboardDisplayType(lua_State* L);
static int ISteamUserStats_DownloadLeaderboardEntries(lua_State* L);
static int ISteamUserStats_DownloadLeaderboardEntriesForUsers(lua_State* L);
static int ISteamUserStats_GetDownloadedLeaderboardEntry(lua_State* L);
static int ISteamUserStats_UploadLeaderboardScore(lua_State* L);
static int ISteamUserStats_AttachLeaderboardUGC(lua_State* L);
static int ISteamUserStats_GetNumberOfCurrentPlayers(lua_State* L);
static int ISteamUserStats_RequestGlobalAchievementPercentages(lua_State* L);
static int ISteamUserStats_GetMostAchievedAchievementInfo(lua_State* L);
static int ISteamUserStats_GetNextMostAchievedAchievementInfo(lua_State* L);
static int ISteamUserStats_GetAchievementAchievedPercent(lua_State* L);
static int ISteamUserStats_RequestGlobalStats(lua_State* L);
static int ISteamUserStats_GetGlobalStatInt64(lua_State* L);
static int ISteamUserStats_GetGlobalStatDouble(lua_State* L);
static int ISteamUserStats_GetGlobalStatHistoryInt64(lua_State* L);
static int ISteamUserStats_GetGlobalStatHistoryDouble(lua_State* L);
static int ISteamUserStats_GetAchievementProgressLimitsInt32(lua_State* L);
static int ISteamUserStats_GetAchievementProgressLimitsFloat(lua_State* L);
static int ISteamApps_BIsSubscribed(lua_State* L);
static int ISteamApps_BIsLowViolence(lua_State* L);
static int ISteamApps_BIsCybercafe(lua_State* L);
static int ISteamApps_BIsVACBanned(lua_State* L);
static int ISteamApps_GetCurrentGameLanguage(lua_State* L);
static int ISteamApps_GetAvailableGameLanguages(lua_State* L);
static int ISteamApps_BIsSubscribedApp(lua_State* L);
static int ISteamApps_BIsDlcInstalled(lua_State* L);
static int ISteamApps_GetEarliestPurchaseUnixTime(lua_State* L);
static int ISteamApps_BIsSubscribedFromFreeWeekend(lua_State* L);
static int ISteamApps_GetDLCCount(lua_State* L);
static int ISteamApps_BGetDLCDataByIndex(lua_State* L);
static int ISteamApps_InstallDLC(lua_State* L);
static int ISteamApps_UninstallDLC(lua_State* L);
static int ISteamApps_RequestAppProofOfPurchaseKey(lua_State* L);
static int ISteamApps_GetCurrentBetaName(lua_State* L);
static int ISteamApps_MarkContentCorrupt(lua_State* L);
static int ISteamApps_GetInstalledDepots(lua_State* L);
static int ISteamApps_GetAppInstallDir(lua_State* L);
static int ISteamApps_BIsAppInstalled(lua_State* L);
static int ISteamApps_GetAppOwner(lua_State* L);
static int ISteamApps_GetLaunchQueryParam(lua_State* L);
static int ISteamApps_GetDlcDownloadProgress(lua_State* L);
static int ISteamApps_GetAppBuildId(lua_State* L);
static int ISteamApps_RequestAllProofOfPurchaseKeys(lua_State* L);
static int ISteamApps_GetFileDetails(lua_State* L);
static int ISteamApps_GetLaunchCommandLine(lua_State* L);
static int ISteamApps_BIsSubscribedFromFamilySharing(lua_State* L);
static int ISteamApps_BIsTimedTrial(lua_State* L);
static int ISteamApps_SetDlcContext(lua_State* L);
static int ISteamNetworking_SendP2PPacket(lua_State* L);
static int ISteamNetworking_IsP2PPacketAvailable(lua_State* L);
static int ISteamNetworking_ReadP2PPacket(lua_State* L);
static int ISteamNetworking_AcceptP2PSessionWithUser(lua_State* L);
static int ISteamNetworking_CloseP2PSessionWithUser(lua_State* L);
static int ISteamNetworking_CloseP2PChannelWithUser(lua_State* L);
static int ISteamNetworking_GetP2PSessionState(lua_State* L);
static int ISteamNetworking_AllowP2PPacketRelay(lua_State* L);
static int ISteamNetworking_CreateListenSocket(lua_State* L);
static int ISteamNetworking_CreateP2PConnectionSocket(lua_State* L);
static int ISteamNetworking_CreateConnectionSocket(lua_State* L);
static int ISteamNetworking_DestroySocket(lua_State* L);
static int ISteamNetworking_DestroyListenSocket(lua_State* L);
static int ISteamNetworking_SendDataOnSocket(lua_State* L);
static int ISteamNetworking_IsDataAvailableOnSocket(lua_State* L);
static int ISteamNetworking_RetrieveDataFromSocket(lua_State* L);
static int ISteamNetworking_IsDataAvailable(lua_State* L);
static int ISteamNetworking_RetrieveData(lua_State* L);
static int ISteamNetworking_GetSocketInfo(lua_State* L);
static int ISteamNetworking_GetListenSocketInfo(lua_State* L);
static int ISteamNetworking_GetSocketConnectionType(lua_State* L);
static int ISteamNetworking_GetMaxPacketSize(lua_State* L);
static int ISteamMusic_BIsEnabled(lua_State* L);
static int ISteamMusic_BIsPlaying(lua_State* L);
static int ISteamMusic_GetPlaybackStatus(lua_State* L);
static int ISteamMusic_Play(lua_State* L);
static int ISteamMusic_Pause(lua_State* L);
static int ISteamMusic_PlayPrevious(lua_State* L);
static int ISteamMusic_PlayNext(lua_State* L);
static int ISteamMusic_SetVolume(lua_State* L);
static int ISteamMusic_GetVolume(lua_State* L);
static int ISteamUGC_CreateQueryUserUGCRequest(lua_State* L);
static int ISteamUGC_CreateQueryAllUGCRequestPage(lua_State* L);
static int ISteamUGC_CreateQueryAllUGCRequestCursor(lua_State* L);
static int ISteamUGC_CreateQueryUGCDetailsRequest(lua_State* L);
static int ISteamUGC_SendQueryUGCRequest(lua_State* L);
static int ISteamUGC_GetQueryUGCResult(lua_State* L);
static int ISteamUGC_GetQueryUGCNumTags(lua_State* L);
static int ISteamUGC_GetQueryUGCTag(lua_State* L);
static int ISteamUGC_GetQueryUGCTagDisplayName(lua_State* L);
static int ISteamUGC_GetQueryUGCPreviewURL(lua_State* L);
static int ISteamUGC_GetQueryUGCMetadata(lua_State* L);
static int ISteamUGC_GetQueryUGCChildren(lua_State* L);
static int ISteamUGC_GetQueryUGCStatistic(lua_State* L);
static int ISteamUGC_GetQueryUGCNumAdditionalPreviews(lua_State* L);
static int ISteamUGC_GetQueryUGCAdditionalPreview(lua_State* L);
static int ISteamUGC_GetQueryUGCNumKeyValueTags(lua_State* L);
static int ISteamUGC_GetQueryUGCKeyValueTag(lua_State* L);
static int ISteamUGC_GetQueryFirstUGCKeyValueTag(lua_State* L);
static int ISteamUGC_ReleaseQueryUGCRequest(lua_State* L);
static int ISteamUGC_AddRequiredTag(lua_State* L);
static int ISteamUGC_AddRequiredTagGroup(lua_State* L);
static int ISteamUGC_AddExcludedTag(lua_State* L);
static int ISteamUGC_SetReturnOnlyIDs(lua_State* L);
static int ISteamUGC_SetReturnKeyValueTags(lua_State* L);
static int ISteamUGC_SetReturnLongDescription(lua_State* L);
static int ISteamUGC_SetReturnMetadata(lua_State* L);
static int ISteamUGC_SetReturnChildren(lua_State* L);
static int ISteamUGC_SetReturnAdditionalPreviews(lua_State* L);
static int ISteamUGC_SetReturnTotalOnly(lua_State* L);
static int ISteamUGC_SetReturnPlaytimeStats(lua_State* L);
static int ISteamUGC_SetLanguage(lua_State* L);
static int ISteamUGC_SetAllowCachedResponse(lua_State* L);
static int ISteamUGC_SetCloudFileNameFilter(lua_State* L);
static int ISteamUGC_SetMatchAnyTag(lua_State* L);
static int ISteamUGC_SetSearchText(lua_State* L);
static int ISteamUGC_SetRankedByTrendDays(lua_State* L);
static int ISteamUGC_SetTimeCreatedDateRange(lua_State* L);
static int ISteamUGC_SetTimeUpdatedDateRange(lua_State* L);
static int ISteamUGC_AddRequiredKeyValueTag(lua_State* L);
static int ISteamUGC_RequestUGCDetails(lua_State* L);
static int ISteamUGC_CreateItem(lua_State* L);
static int ISteamUGC_StartItemUpdate(lua_State* L);
static int ISteamUGC_SetItemTitle(lua_State* L);
static int ISteamUGC_SetItemDescription(lua_State* L);
static int ISteamUGC_SetItemUpdateLanguage(lua_State* L);
static int ISteamUGC_SetItemMetadata(lua_State* L);
static int ISteamUGC_SetItemVisibility(lua_State* L);
static int ISteamUGC_SetItemTags(lua_State* L);
static int ISteamUGC_SetItemContent(lua_State* L);
static int ISteamUGC_SetItemPreview(lua_State* L);
static int ISteamUGC_SetAllowLegacyUpload(lua_State* L);
static int ISteamUGC_RemoveAllItemKeyValueTags(lua_State* L);
static int ISteamUGC_RemoveItemKeyValueTags(lua_State* L);
static int ISteamUGC_AddItemKeyValueTag(lua_State* L);
static int ISteamUGC_AddItemPreviewFile(lua_State* L);
static int ISteamUGC_AddItemPreviewVideo(lua_State* L);
static int ISteamUGC_UpdateItemPreviewFile(lua_State* L);
static int ISteamUGC_UpdateItemPreviewVideo(lua_State* L);
static int ISteamUGC_RemoveItemPreview(lua_State* L);
static int ISteamUGC_SubmitItemUpdate(lua_State* L);
static int ISteamUGC_GetItemUpdateProgress(lua_State* L);
static int ISteamUGC_SetUserItemVote(lua_State* L);
static int ISteamUGC_GetUserItemVote(lua_State* L);
static int ISteamUGC_AddItemToFavorites(lua_State* L);
static int ISteamUGC_RemoveItemFromFavorites(lua_State* L);
static int ISteamUGC_SubscribeItem(lua_State* L);
static int ISteamUGC_UnsubscribeItem(lua_State* L);
static int ISteamUGC_GetNumSubscribedItems(lua_State* L);
static int ISteamUGC_GetSubscribedItems(lua_State* L);
static int ISteamUGC_GetItemState(lua_State* L);
static int ISteamUGC_GetItemInstallInfo(lua_State* L);
static int ISteamUGC_GetItemDownloadInfo(lua_State* L);
static int ISteamUGC_DownloadItem(lua_State* L);
static int ISteamUGC_BInitWorkshopForGameServer(lua_State* L);
static int ISteamUGC_SuspendDownloads(lua_State* L);
static int ISteamUGC_StartPlaytimeTracking(lua_State* L);
static int ISteamUGC_StopPlaytimeTracking(lua_State* L);
static int ISteamUGC_StopPlaytimeTrackingForAllItems(lua_State* L);
static int ISteamUGC_AddDependency(lua_State* L);
static int ISteamUGC_RemoveDependency(lua_State* L);
static int ISteamUGC_AddAppDependency(lua_State* L);
static int ISteamUGC_RemoveAppDependency(lua_State* L);
static int ISteamUGC_GetAppDependencies(lua_State* L);
static int ISteamUGC_DeleteItem(lua_State* L);
static int ISteamUGC_ShowWorkshopEULA(lua_State* L);
static int ISteamUGC_GetWorkshopEULAStatus(lua_State* L);
static int ISteamInventory_GetResultStatus(lua_State* L);
static int ISteamInventory_GetResultItems(lua_State* L);
static int ISteamInventory_GetResultItemProperty(lua_State* L);
static int ISteamInventory_GetResultTimestamp(lua_State* L);
static int ISteamInventory_CheckResultSteamID(lua_State* L);
static int ISteamInventory_DestroyResult(lua_State* L);
static int ISteamInventory_GetAllItems(lua_State* L);
static int ISteamInventory_GetItemsByID(lua_State* L);
static int ISteamInventory_SerializeResult(lua_State* L);
static int ISteamInventory_DeserializeResult(lua_State* L);
static int ISteamInventory_GenerateItems(lua_State* L);
static int ISteamInventory_GrantPromoItems(lua_State* L);
static int ISteamInventory_AddPromoItem(lua_State* L);
static int ISteamInventory_AddPromoItems(lua_State* L);
static int ISteamInventory_ConsumeItem(lua_State* L);
static int ISteamInventory_ExchangeItems(lua_State* L);
static int ISteamInventory_TransferItemQuantity(lua_State* L);
static int ISteamInventory_SendItemDropHeartbeat(lua_State* L);
static int ISteamInventory_TriggerItemDrop(lua_State* L);
static int ISteamInventory_TradeItems(lua_State* L);
static int ISteamInventory_LoadItemDefinitions(lua_State* L);
static int ISteamInventory_GetItemDefinitionIDs(lua_State* L);
static int ISteamInventory_GetItemDefinitionProperty(lua_State* L);
static int ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(lua_State* L);
static int ISteamInventory_GetEligiblePromoItemDefinitionIDs(lua_State* L);
static int ISteamInventory_StartPurchase(lua_State* L);
static int ISteamInventory_RequestPrices(lua_State* L);
static int ISteamInventory_GetNumItemsWithPrices(lua_State* L);
static int ISteamInventory_GetItemsWithPrices(lua_State* L);
static int ISteamInventory_GetItemPrice(lua_State* L);
static int ISteamInventory_StartUpdateProperties(lua_State* L);
static int ISteamInventory_RemoveProperty(lua_State* L);
static int ISteamInventory_SetPropertyString(lua_State* L);
static int ISteamInventory_SetPropertyBool(lua_State* L);
static int ISteamInventory_SetPropertyInt64(lua_State* L);
static int ISteamInventory_SetPropertyFloat(lua_State* L);
static int ISteamInventory_SubmitUpdateProperties(lua_State* L);
static int ISteamInventory_InspectItem(lua_State* L);

#endif // platforms

#endif // STEAMWORKS_DEFOLD_H
